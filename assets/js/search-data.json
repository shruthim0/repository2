{
  
    
        "post0": {
            "title": "Unit 3, Sections 12-13",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Procedure: is a named group of programming instructions that may have parameters and return values . Parameters: are input values of a procedure . Arguments: specify the values of the parameters when a procedure is called . Modularity: separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality is called . Procedural Abstraction: which provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . What are some other names for procedures?: function . Why are procedures effective?: We have the ability to alter the result without actually changing the calls to the program. Convenient to change the actions if there is an error in the code (modularity). Able to break the code up and abstract what different part of the code does; helps identiy bugs, error, etc. MUCH better than reviewing code WITHOUT a procedure (you would have to look at every line by line) . Extra Notes . A procedure call interrupts a series of statements and makes the program execute the statements in the procedure. After executing, it will return to the original call and finish the statements. | in python, to call a procedure you would write the name of the procedure followed by the parentheses with the parameters of the procedure (there may not be parameters, but parenthesis must be there). | procedural abstraction: process that allows a procedure to be used only knowing WHAT it does, not HOW it does it. Have variable parameters | Code handles different situations depending on how its parameters are set/called | It allows a solution to a large problem based on the solutions of smaller subproblems. | Separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality is called modularity | . | . function subtraction(a,b) { return a - b; } subtraction(10,12) . Challenge 1 below: Add the command that will call the procedure. . def dectobinary(decimal): binary = 0 i = 0 num = decimal while(num &gt; 0): binary = ((num%2)*(10**i)) + binary # set binary equal to remainder of the input/2, multiplied by 10^i num = int(num/2) #now number equal num/2 rounded to an integer i += 1 #incriment by 1 print(&quot;Your number &quot; + str(decimal) + &quot; in binary is &quot; + str(binary)) #output result decimal = 7 dectobinary(decimal) . Your number 7 in binary is 111 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . a = int(input(&quot;Enter your first value&quot;)) b= int(input(&quot;Enter your second value?&quot;)) def function(a,b): if a &gt; b: print(str(a) + &quot; (a) is the larger value!&quot;) print(str(b) + &quot; (b) is the smaller value!&quot;) else: if b &gt; a: print(str(b) + &quot; (b) is the larger value&quot;) print(str(a) + &quot; (a) is the smaller value!&quot;) if b == a: print(str(a) + str(b) + &quot; (a and b) are equal&quot;) function(a,b) . 4 (b) is the larger value 1 (a) is the smaller value! . a = int(input(&quot;Enter your first value&quot;)) b= int(input(&quot;Enter your second value?&quot;)) def findMax(a,b): if a &gt; b: print(str(a) + &quot; (a) is the larger value!&quot;) else : if b &gt; a: print(str(b) + &quot; (b) is the larger value!&quot;) def findMin(a,b): if a &lt; b: print(str(a) + &quot; (a) is the smaller value!&quot;) else: if b &lt; a: print(str(b) + &quot; (b) is the smaller value!&quot;) findMax(a,b) findMin(a,b) . 4 (b) is the larger value! 1 (a) is the smaller value! . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . import math def charToBinary(term): char = [] binary = [] for x in term: char.append(ord(x)) #each character from APCSP is assigned to a list (char) for x in char: binary.append(int(bin(x)[2:])) #for each character in list char, the binary of that character is appended to binary list (I just used the built in bin conversion function) return binary #binary list is printed print(&quot; &#39;APCSP&#39; in binary is: &quot;) print(charToBinary(&quot;APCSP&quot;)) # The output shown below is the output you are supposed to get . &#39;APCSP&#39; in binary is: [1000001, 1010000, 1000011, 1010011, 1010000] .",
            "url": "https://shruthim0.github.io/repository2/2023/05/22/notetemplate.html",
            "relUrl": "/2023/05/22/notetemplate.html",
            "date": " • May 22, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the logical structure of a database | It fundamentally determines in which manner data can be stored, organized, and manipulated | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a relational model and an object oriented model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . Created new uid bob Created new uid bobby Created new uid bobbert Created new uid bobruth . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images/easy&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and difficulty. | In the Images class, the tablename attribute specifies the name of the table (in the .db file). | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to commit the changes to the database. | The db module used in this code is part of a larger library called SQLAlchemy, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . In the backend, images are stored as image paths. When the image needs to be accessed the image path is accessed. The image and its metadata are converted into base64 and send to the frontend. | . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | GET, POST, PUT, and DELETE methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to manipulate the database. | Variables defined in the model file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize routes and functions | request: used to access data sent to the Flask app. through the http request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to fetch specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will query through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the frontend of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to add a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming request. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The args variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of 500 will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to edit/update a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which retrieves the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new values requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to delete a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific variables will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an error is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to display the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the frontend. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? GET, POST, PUT, DELETE | . | What is a parser and how would it be aid with data validation? parser will extract data from an incoming request. | . | What is the role endpoints in Flask? The way a user can interact with a database&#39;s data. | . | Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a table, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this specific function in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it iterates through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as parameters to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the array of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the HTTP POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, headers, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the method requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the base64 that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with css by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? | What is the fetch() function and how is it used in frontend logic? The &#39;fetch()&#39; function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. | . | How is data formatted and sent to the backend? (mention JSON in your answer) | Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a pivot. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to log(n), where n is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales linearly. Thus for each iterative process, our timerun scales proportionally to n. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as o(nlogn), where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to O(logn), we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . The quicksort algorithm will sort a list. It will choose an element in the list as the &quot;pivot&quot; value. Then it will sort the values into two sections, values smaller than the pivot and values larger than the pivot. This process is repeated with each section, creating more subsections. Once every combination of sets is orderes, the full list will be ordered. THe time complexity of this algoritm is O(nlogn). Space complexity is negligible since no new data is created in the process. | . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM . def quicksort(list, left, right): #takes array, and 2 indices if left &lt; right: # if this isnt true then array is either 0 or 1 length (therefore already sorted) pivot_index = partition(list, left, right) # partition the list/array and get the pivot&#39;s index quicksort(list, left, pivot_index - 1) # move each subarrays to left and right of pivot quicksort(list, pivot_index + 1, right) def partition(list, left, right): pivot = list[right] # choose the right most element as the pivot i = left - 1 for x in range(left, right): # partition the array into elements less than or greater than the pivot if list[x] &lt;= pivot: i += 1 list[i], list[x] = list[x], list[i] list[i + 1], list[right] = list[right], list[i + 1] # Move the pivot to its final position return i + 1 # Return the pivot index . list = [5, 12312, 7, 3, 99, 1324, 4, 62, 82] quicksort(list, 0, len(list) - 1) #allows you to choose which part of list to order, (this case is ordering full list) print(list) . [3, 4, 5, 7, 62, 82, 99, 1324, 12312] . flowchart . .",
            "url": "https://shruthim0.github.io/repository2/student/2023/05/22/lesson-student.html",
            "relUrl": "/student/2023/05/22/lesson-student.html",
            "date": " • May 22, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Lesson 16",
            "content": "Format for checkboxes . - [x] [JS k](https://ananyag2617.github.io/ananyagaurav2617/2022/11/19/jscheck.html) . Simulations: . Daily Video 1: . Objective: How we use computers to reflect real world phenomena via simulations. . Key Points: . Computer simulations can be limited and have bias . Example: We can assume that when a car is moving, there will be people in it, which is a proper bias to make. But, a simulation may have a bias on which cars will be chosen to simulate a crash. . | Computer simulation examples: . games . | rolling dice . | spinners . | Molecular models . | Analyze chemicals/reactions . | For air traffic control . To test and find what is the optimal number of aircrafts that should be in the air at once. . | | | | Simulations . Will not always have the same result . | They investigate a phenomenon without real-world constraints of time, money, or safety . | Holding a real experiment would most likely result in more accurate results . | A simulation can model real-world events that aren’t practical to hold experiments for . Ex. the air traffic control example– not very safe or practical to hold an experiment with expensive and dangerous equipment . | | | Question 1 . An environmental researcher has been conducting a study on the population of hawks in the area in order to predict the number of hawks that will occur in the upcoming year. She created a computer model using data from the past five years. The simulation predicted 42 hawks in the area, but only 29 appeared . Which of the following strategies will be the LEAST likely to offer a more accurate result? . Gathering more data from previous years . | Consider adding more data on other species in the area . | Taking into consideration changing weather pattern in the area . | Remove more data and calculations so the simulation can run faster . | | | | Recap . Simulations are abstractions of complex situations done for a specific purpose . | Simulations provide opportunities to study and make predictions when experiments are not feasible for many reasons to include: cost, safely, and accessibility . | A simulation uses and represents varying sets of data to reflect the changing state of a phenomenon . | Developing abstract simulations involve removing details or simplifying functionality . | Simulations can be done without the constraints of the real-world . | Simulations can have bias . | Simulations can refine previous results and hypothesis . | | Question 2 . The transportation department would like to build an elevated train system that will route through 3 cities. The transportation department wants to administer a simulation of this train system before construction begins. WHich of the following statements is true about the use of this simulation for the project? . The simulation may reveal possible safety issues that can be corrected before construction begins . | The simulation is not needed because other elevated train systems exist. . | A simulation cannot be used to test the train system in different weather conditions . | The simulation will add high costs to the project. . | | | Question 3 . Which of the following scenarios would be the LEAST beneficial to have as a simulation? . A retail company wants to identity the item which sold the most on their website . | A restaurant wants to determine if the use of robots will increase efficiency . | A sports bike company wants to study design changes to their new bike design . | | | Hacks: . Make a copy of this post into your own repository. . Complete the MC questions WITH an explanation for your answer. . | Correct errors (we make fake errors) . | Customization of simulation/ make your own . | Identifying the best simulation for a given issue. . | | Plan . Talk about what similulations are, essential key points, and why and how they are used. . What makes these a simulation? . | What are the simplifications they make? Why? . | What are the assumptions? . | What are the benefits of running a simulation over the real thing? . | What are the detriments? . | How can you get closer to the “actual” results? . | . | Show how simualtions can recreate an aspect of our physical world with examples . | Watch a video? . | Show them a few sample simulations . | Hacks . Make a copy of this post into your own repository. We are going to have everyone make a copy of this notebook so they can always refer back to it. . | Complete the MC questions WITH an explanation for your answer. To check their understanding we are going to have an MC quiz that the can take. . | Explore different simulations. . https://codecombat.com/teachers/resources/apcsp-internet-chat-simulation . | Gravity Simulation . | Conway’s Game of Life . | Simulating a Coin Flip . | Wolf Sheep Predation Simulation . | Data Structures Exercises Badge . | . | Customization of simulation/ make your own We will have students make their own simulation and have them play around with it. . | Copy the simulation into your own repository and make changes to it. They can also copy the simulation we give them and play around it and make changes to it. . |",
            "url": "https://shruthim0.github.io/repository2/2023/05/22/Unit-3-Lesson-16.html",
            "relUrl": "/2023/05/22/Unit-3-Lesson-16.html",
            "date": " • May 22, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] [&quot;Tree&quot;, tree] ] tree = [ [&quot;&quot;, &quot;*&quot;], [&quot;&quot;,&quot;/,|], [&quot;&quot;,&quot;/&quot;,&quot;&quot;, &quot;|&quot;], [/,&quot;&quot;,&quot;&quot;, ], [,/,&quot;&quot;,&quot;&quot;, ] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Input In [2] [&#34;&#34;, *], ^ SyntaxError: invalid syntax . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 4; var cols = 3; var keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] console.log(keypad); element.append(keypad); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) print(1, &quot; fell down and broke his head...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col]) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(5) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; /&quot;&quot; ,&quot;) print(sp + &quot; &lt;&gt;^ L____/|&quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; `) /` , /&quot;) print(sp + &quot; `&#39; /&quot;) print(sp + &quot; _/_Y&quot;) print(OCEAN_COLOR + &quot; &quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.5) ship() # activate/call ship function . / , &lt;&gt;^ L____/| `) /` , / `&#39; / _/_Y .",
            "url": "https://shruthim0.github.io/repository2/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? - Changes to sansiserif and blue font | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 .",
            "url": "https://shruthim0.github.io/repository2/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Big Idea 2 - Data Related to User Guide",
            "content": "Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to hekp the user experience and increase the application&#39;s performance. . By learning how to handle data related to users effectively and efficiently, you&#39;ll be equipped with the skills and knowledge needed to build helpful applications that meet the needs of your users. . PLEASE DON&#39;T OPEN THE POPCORN HACKS, WE WILL OPEN THEM DURING THE PRESENTATION . Basics of Class and User Data . Establishing Class/User Data and making a new user . Because Python is an object-oriented programming (OOP) language, everything in it represents an objects. Lists, dictionaries, functions, etc. are all examples of Python objects. Generally speaking, a Python object is an entity of data items and methods describing the behavior of those items. . A Python class is a template used to create Python objects. We can think of it as a cooking recipe, where all the ingredients and their quantities are listed, and the whole process of cooking is described step-by-step. . In this case, we can compare a cake recipe to a class, and a cake cooked following that recipe to an object (i.e., an instance of that class). Using the same recipe (class), we can create many cakes (objects). This is the essence of creating a class in Python: to define data elements and the rules establishing how these elements can interact and change their state — and then use this framework to build various objects in a set way, instead of creating them from scratch every time. . Let&#39;s look at a few examples: . class Bikes: name = &quot;&quot; gear = 0 # create objects of class bike1 = Bikes() # objectName = ClassName() bike2 = Bikes() . Now that we have our class and object defined, we can now run code to modify certain attributes of our objects. . bike1.gear = 11 bike1.name = &quot;Mountain Bike&quot; bike2.gear = 13 bike2.name = &quot;Road Bike&quot; print(f&quot;Name: {bike1.name}, Gears: {bike1.gear} &quot;) . Name: Mountain Bike, Gears: 11 . Popcorn Hacks #1: Add another print command to display the attributes of Bike #2. What output will this code segment produce? print(f&quot;Name: {bike2.name}, Gears: {bike2.gear} &quot;) . Name: Road Bike, Gears: 13 . Example: Defining a User Class . Now we will look into Classes for users of a program or website. . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . For this cell, we define a User class with a constructer method &quot;init&quot; that takes username and email as inputs. The display_info method is used to print the user information. . For backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Now let&#39;s make a new User: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;) new_user.display_info() . Here&#39;s a step-by-step breakdown of how the code relates to backend functionality: . new_user = User(&quot;jeffrey&quot;, &quot;leejeffreysc@gmail.com&quot;): This line creates a new User object, initializing it with the username &quot;jeffrey&quot; and the email &quot;leejeffreysc@gmail.com&quot;. This could represent a user who has just signed up for an account, and the input values would typically come from user input, such as a frontend signup form. . new_user.display_info(): This line calls the display_info method on the new_user object, which prints the user&#39;s information (username and email) to the console. In a real-world backend application, you might use this method or a similar one to display user information in logs, send a welcome email, or create an API response with the user&#39;s data. . User/Class @ Decorators: . A Python Class allows for the use of @ decorators, these allow access to attribute data without the use of functions. . @property decorator (aka getter). This enables developers to &quot;GET&quot; attribute data in a clean method (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to &quot;UPDATE&quot;/set attribute data in a clean method (object.name = &quot;Jeffrey&quot; versus object.set_name(&quot;Jeffrey&quot;)) | . The getter and setter methods provide a clean and controlled way to _ and _ the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . class Student: def __init__(self, student, name): self._student = student self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Student class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . Usage of the getter and setter methods are below: . student = Student(1001, &quot;Derek Sol&quot;) print(student.name) # Get the name using the getter method student.name = &quot;Jagger Klein&quot; # Set the name using the setter method print(student.name) . Derek Sol Jagger Klein . Popcorn Hacks #2: The following code segment for computers does not have getter and setter methods called. Using the missing attributes &quot;model&quot; and &quot;year&quot;, add example getter and setters methods for this class. Show us an example output that this code segment might produce. class Computer: def __init__(self, model, year): self._model = model self._year = year @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . my_computer = Computer(&quot;Lenovo&quot;, 2018) print(&quot;Computer Model:&quot;, my_computer.model) print(&quot;Year:&quot;, my_computer.year) . Computer Model: Lenovo Year: 2018 . Databases and SQLite . A database is a structured collection of data that is organized and stored in a way that allows for efficient retrieval, manipulation, and management of that data. In other words, a database is a software application that allows you to store and manage large amounts of data in an organized manner. . Some Examples of Databases: . Storing and managing customer data, such as contact information, order history, and customer preferences. | Keeping track of inventory levels and stock movements in a warehouse or retail store. | Managing financial transactions, such as payments, invoices, and receipts. | . SQLite is a software application that provides a user-friendly database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is programmed within an application, which means it does not require a separate server process to operate. This makes SQLite great for web applications or for use in situations where you don&#39;t need a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, a Python web framework. Flask allows programmers to easily interact with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. . Setting up a SQLite database in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE students (id INTEGER PRIMARY KEY, name TEXT, grade INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Note: This will create a new file &#39;database.db&#39; in the _notebooks folder if one doesn&#39;t exist. . Breaking down this code segment: . We imported the necessary libraries and tools | We created a Flask application | We connected to the SQLite database using SQLite3 | We created a cursor object to execute SQL commands | We created tables in the database using SQL commands | . Flask provides several extensions and tools for working with SQLite databases, including Flask-SQLAlchemy, Flask-SQLite3, and Flask-Admin. These tools provide a high-level interface for interacting with the database, making it easy to perform common operations such as adding, updating, and deleting records. . CRUD Commands with SQLite . CRUD stands for Create, Read, Update, and Delete, which are the basic operations you can perform on data. SQL is useful library because it allows programmers to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command. . | . Example of CRUD within an SQLite Database . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE basketball (_player TEXT PRIMARY KEY, _team TEXT, _position TEXT, _opinion TEXT)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Hypothetically, our programmer wanted to create an application about basketball players, and created a new table in SQL to store and interact with user-submitted data. Using the same method as the previous table, a new table &#39;basketball&#39; is created by the cursor and added to the &#39;database.db&#39; file. . Create Function: . def create(): database = &#39;database.db&#39; player = input(&quot;Enter the player name&quot;) team = input(&quot;Enter team name&quot;) position = input(&quot;Enter player position&quot;) opinion = input(&quot;Enter your opinion &quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO basketball (_player, _team, _position, _opinion) VALUES (?, ?, ?, ?)&quot;, (player, team, position, opinion)) # Commit the changes connection.commit() print(f&quot;New basketball with {player} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New basketball with lydia is added. . The create() feature allows users to input information about a basketball player and store it in a SQLite table &#39;basketball&#39; inside the database file we already created &#39;database.db&#39;. The code prompts the user for the player&#39;s name, team name, position, and their opinion about the player, then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . The cursor.execute() method is called with an SQL INSERT command to insert a new entry into the &#39;basketball&#39; table. The connection.commit() method saves the changes to the database, and if the record is inserted successfully, a confirmation message is printed. In case of errors, the except block catches the sqlite3.Error exception and prints an error message. Finally, the cursor and the connection to the database are closed, and the create() function is called to execute the code. . Read Function: . def read(): database = &#39;basketball.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from basketball table results = cursor.execute(&#39;SELECT * FROM basketball&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No player found.&quot;) # Closing cursor and connection cursor.close() connection.close() read() . The read() feature retrieves and prints all entries from the &#39;basketball&#39; table in the specified SQLite database. The script establishes a connection to the SQLite database, creates a cursor object for executing SQL commands, and calls the cursor.execute() method with an SQL SELECT command to fetch all the entires from the &#39;basketball&#39; table. The fetchall() method retrieves all the rows returned by the SELECT command and stores them in the results variable. . The code then checks if there are any records in the table and, if so, iterates through each row in the results using a &#39;for loop&#39; and prints the row. If there are no records, the program prints &quot;No player found&quot;. Finally, the cursor and the connection to the database are closed, and the read() function is called to execute the code. . Update Function: . import sqlite3 def update(): database = &#39;database.db&#39; player = input(&quot;Enter a basketball player to update the opinion for:&quot;) opinion = input(&quot;Enter new opinion:&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating review for the basketball cursor.execute(&quot;UPDATE basketball SET _opinion = ? WHERE _player = ?&quot;, (opinion, player)) if cursor.rowcount != 0: print(f&quot;Review for the basketball is updated to {opinion}&quot;) connection.commit() else: print(f&quot;Player not found.&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() #update() . This update feature updates the opinion for a specific basketball player in an SQLite database. The code defines an update() function, which prompts the user to input the basketball player they want to update and the new opinion for that player. The script connects to the SQLite database, creates a cursor object, and handles any potential errors while executing the SQL command. The cursor.execute() method updates the review in the database for the specified basketball item. . If at least one value is changed, a success message is printed and the changes are committed to the database. Otherwise, a &quot;Player not found.&quot; message is displayed. In the except block, if an error occurs, an error message along with specific error details is printed. Finally, the cursor and connection to the database are closed, and the update() function is called to execute the review update process. . Delete Function . import sqlite3 def delete(): database = &#39;basketball.db&#39; player = input(&quot;Enter basketball player to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM basketball WHERE _player = ?&quot;, (player,)) if cursor.rowcount == 0: print(f&quot;{player} does not exist&quot;) else: print(f&quot;Successfully deleted basketball player {player}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() #delete() . The delete feature deletes a specific basketball player from the specified SQLite database. The code defines a delete() function that prompts the user to input the basketball player they want to delete. After connecting to the SQLite database and creating a cursor object, the code handles potential errors while executing the SQL command. The cursor.execute() method is used to delete the basketball item with the specified ID. . If no rows are affected, a message is printed indicating that the basketball player does not exist. Otherwise, a success message is displayed, confirming the basketball player&#39;s deletion. The changes are then committed to the database. In the except block, any error that occurs triggers an error message along with specific error details. Finally, the cursor and connection to the database are closed, and the delete() function is called to execute the basketball item deletion process. This code showcases a practical way to remove information from an SQLite database based on user input. . Menu Functions: . Alongside the four CRUD functions, a menu function is designed to manage Create, Read, Update, Delete operations and display the schema. The menu function is responsible for taking in user inputs and making the program call various functions. When running a menu function, users enter their desired operation, whether it be Create, Read, Update, or Delete, and the input is checked by various conditions to determine which function should be called. Many menu functions are called recursively, so the cell will repeat the menu process until the user decides to exit. . Popcorn Hacks #3: The menu function below is missing some of the CRUD functions for the specified basketball players table. Fix the following code by adding the intended CRUD functions, then perform a READ function on the database. def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . New basketball with lina is added. . Image Uploading with SQLite . Using various Python Libraries, we are able to upload and customize images using python code, as well as using images to interact with databases. . One way to store images in a database is to INSERT the image data as a binary blob. . To store an image as a blob in SQLite, you can first read the image file and convert it to a binary format using a programming language like Python. Here&#39;s an example of how to do this: . Making the Table to store our Image Data: . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE images (name TEXT PRIMARY KEY, data BLOB)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . We use a new data type &quot;BLOB&quot; to store specific data from our .jpg image. . Adding Image Data to our Table: . You can use this example sunset jpg for our code. Download and place it in the same repository as this notebook. Rename image to &#39;image.jpg&#39; . https://t4.ftcdn.net/jpg/01/04/78/75/360_F_104787586_63vz1PkylLEfSfZ08dqTnqJqlqdq0eXx.jpg . import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;image.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;image&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . In this example, the image data is read from the &quot;image.jpg&quot; file and inserted into the &quot;images&quot; table in the &quot;database.db&quot; SQLite database. The image data is then stored as a binary blob in the &quot;data&quot; column of the table. . Converting BLOB to Image -&gt; Displaying Image . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;image&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . The image data is then retrieved from the &quot;images&quot; table using a SELECT statement with a WHERE clause that correctly matches the image name. The binary image data is then converted to an image object using the PIL library and displayed on the screen. . Popcorn Hacks #4: Using the same table, find a new .jpg image and add its image data to the database. Display the image using the PIL Library and show us the output image. import sqlite3 # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(&#39;smiley.jpg&#39;, &#39;rb&#39;) as jpg: image_data = jpg.read() # Insert the image data into the database conn.execute(&quot;INSERT INTO images (name, data) VALUES (?, ?)&quot;, (&#39;smiley&#39;, image_data)) # Commit the transaction conn.commit() # Close the connection conn.close() . import sqlite3 from PIL import Image import io # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Retrieve the image data from the database result = conn.execute(&quot;SELECT data FROM images WHERE name=?&quot;, (&#39;smiley&#39;,)).fetchone() # Convert the binary data to an image object image_data = io.BytesIO(result[0]) image = Image.open(image_data) # Display the image image.show() # Close the connection conn.close() . HACKS (Due Sunday 11:59 PM) . Make sure to fill in all blank notes and popcorn hacks, and run each of the interactive coding exercises. (0.45) . Extra Credit: Winning team for Popcorn Hacks (+0.05) | . Create your own SQL database and create an algorithm that can insert, update, and delete data related to your topic of choice. Functionality for adding image data MUST be included. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend database to a visible frontend! Screenshots of displayed data is fine. (+0.05) | . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;database.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE art (name TEXT PRIMARY KEY, photo BLOB)&#39;&#39;&#39;) conn.commit() conn.close() #CREATE def insert_art(name, photo_path): conn = sqlite3.connect(&#39;database.db&#39;) # Read the image file as binary data with open(photo_path, &#39;rb&#39;) as f: photo_data = f.read() try: # Insert the art into the database conn.execute(&quot;INSERT INTO art (name, photo) VALUES (?, ?)&quot;, (name, photo_data)) conn.commit() print(f&quot;{name} added to the database:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} already exists in the database.&quot;) # Close the connection conn.close() #UPDATE def update_art(name, photo_path=None): # Open a connection to the SQLite database conn = sqlite3.connect(&#39;database.db&#39;) # Read the new image file as binary data if photo_path: with open(photo_path, &#39;rb&#39;) as f: photo_data = f.read() try: # Update the art&#39;s information if photo_path: conn.execute(&quot;UPDATE art SET photo=? WHERE name=?&quot;, (photo_data, name)) conn.commit() print(f&quot;{name} updated:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} does not exist in the database.&quot;) conn.close() def delete_art(name): conn = sqlite3.connect(&#39;database.db&#39;) try: # Deleting art information conn.execute(&quot;DELETE FROM art WHERE name=?&quot;, (name,)) conn.commit() print(f&quot;{name} deleted from the database:&quot;) except sqlite3.IntegrityError as e: print(f&quot;Error: {e}. {name} does not exist in the database.&quot;) conn.close() . from flask import Flask import sqlite3 from io import StringIO #CREATE insert_art(&quot;Monet Painting&quot;, &quot;images/monet.jpg&quot;) conn = sqlite3.connect(&#39;database.db&#39;) result = conn.execute(&quot;SELECT photo FROM art WHERE name=?&quot;, (&#39;Monet Painting&#39;,)).fetchone() image_data = io.BytesIO(result[0]) image = Image.open(image_data) image.show() conn.close() #UPDATE update_art(&quot;Monet Painting&quot;, &quot;images/monetnew.jpg&quot;) conn = sqlite3.connect(&#39;database.db&#39;) result = conn.execute(&quot;SELECT photo FROM art WHERE name=?&quot;, (&#39;Monet Painting&#39;,)).fetchone() image_data = io.BytesIO(result[0]) image = Image.open(image_data) image.show() conn.close() #DELETE delete_art(&quot;Monet Painting&quot;) conn = sqlite3.connect(&#39;database.db&#39;) result = conn.execute(&quot;SELECT photo FROM art WHERE name=?&quot;, (&#39;Monet Painting&#39;,)).fetchone() image_data = io.BytesIO(result[0]) image = Image.open(image_data) image.show() conn.close() . Monet Painting updated: . NameError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb Cell 57 in &lt;cell line: 14&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb#Y111sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; conn = sqlite3.connect(&#39;database.db&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb#Y111sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; result = conn.execute(&#34;SELECT photo FROM art WHERE name=?&#34;, (&#39;Monet Painting&#39;,)).fetchone() &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb#Y111sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; image_data = io.BytesIO(result[0]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb#Y111sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; image = Image.open(image_data) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-27-P3M-Team-SnapShot-Student.ipynb#Y111sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; image.show() NameError: name &#39;io&#39; is not defined . ^^ Works but images are too big and won&#39;t commit unless I clear. . from PIL import Image im = Image.open(r&quot;images/monet.jpg&quot;) image = Image.open(r&quot;images/monetnew.jpg&quot;) print(&quot;Monet Painting added to the database:&quot;) display(im) print(&quot;Monet Painting updated:&quot;) display(image) print(&quot;Monet Painting deleted:&quot;) . Monet Painting added to the database: . Monet Painting updated: . Monet Painting deleted: .",
            "url": "https://shruthim0.github.io/repository2/2023/04/27/P3M-Team-SnapShot-Student.html",
            "relUrl": "/2023/04/27/P3M-Team-SnapShot-Student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called abstraction. | . | . Practice Questions: . How many bits are in 3 bytes? 24 | What digital information can be represented by bits? yes/no, on/off, +/-... | Are bits an analog or digital form of storing data? What is the difference between the two? analog; not continuous #### Examples | Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is cool binary is cool binary is awesome binary is awesome binary is awesome binary is awesome binary is awesome binary is awesome binary is cool binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in overflow or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? 1+2+2^2+2^3+2^4+2^5 = 32-1=31 | One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? 56-16=40&gt; 2^40; 2^56/2^16= 2^40 . | 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) . | first bit will depresent whether the number is negative or positive | so it would be the largest 4 bit number | So the largest number that can be rep is 15 | . Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(156, 257) . OverflowError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; exponent(156, 257) /home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb Cell 5 in exponent(base, power) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def exponent(base, power): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &#34;^&#34; and &#34;=&#34;. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-04-21-P3M-BinaryLesson.ipynb#W4sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; print(str(base) + &#34;^&#34; + str(power) + &#34; = &#34; + str(math.pow(base, power))) OverflowError: math range error . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? | 0-4 | . What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? base 16. . 0-15 | . | When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? . | W, 23 | . Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = (2^1)+2^3 = 10 | 11100010 = 2^1+2^5+2^6+2^7= 226 | 10 = 2^1= 2 | | Fill in the blanks (convert to binary) . 12 = 001100 | 35 = 100011 . 35/2= 17 +1 17/2 = 8 + 1 8/2 = 4 +0 4/2 = 2 +0 2/2 = 1 +0 1/2 = 0 + 1 . | 256 = 100000000 . | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . #decimal input&gt; binary and decimal output a = int(input(&quot;Enter first number&quot;)) b = int(input((&quot;Enter second number&quot;))) operation = input(&quot;Select operation, multiple (m), divide (d), add (a), or subtract (s)&quot;) def decimaltobinary(num): if num &gt; 1: decimaltobinary(num // 2) #divide input by 2 print(num % 2 , end = &quot;&quot;) def operate(a,b): if operation == &quot;m&quot;: c = a * b print (c) print(decimaltobinary(c)) elif operation == &quot;d&quot;: c = a/b print (c) print(decimaltobinary(c)) elif operation == &quot;a&quot;: c = a + b print (c) print(decimaltobinary(c)) elif operation == &quot;s&quot;: c = a - b print (c) print(decimaltobinary(c)) operate(a,b) . 255 1111111None . a = input(&quot;Enter first binary number&quot;) b = input((&quot;Enter second binary number&quot;)) operation = input(&quot;Select operation, multiple (m), divide (d), add (a), or subtract (s)&quot;) def binarytodecimal(binary): decimal = 0 for digit in binary: decimal = decimal*2 + int(digit) def decimaltobinary(num): if num &gt; 1: decimaltobinary(num // 2) #divide input by 2 print(num % 2 , end = &quot;&quot;) def operateopposite(a,b): if operation == &quot;m&quot;: c = binarytodecimal(a) * binarytodecimal(b) print (c) print(decimaltobinary(c)) elif operation == &quot;d&quot;: c = binarytodecimal(a) / binarytodecimal(b) print (c) print(decimaltobinary(c)) elif operation == &quot;a&quot;: c = binarytodecimal(a) + binarytodecimal(b) print (c) print(decimaltobinary(c)) elif operation == &quot;s&quot;: c = binarytodecimal(a) - binarytodecimal(b) print (c) print(decimaltobinary(c)) operateopposite(a,b) .",
            "url": "https://shruthim0.github.io/repository2/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "2018 MCQ Test",
            "content": "Score: 61/66 . Question My Answer Correct Answer . Which of the following best describes one of the benefits of using an iterative and incremental process of program development? | It enables programmers to create programs that use the lowest-level abstractions available.Explanation: The use of low-level abstractions is unrelated to the development process used. | The ability to provide data transmission even when some connections have failed.Explanation:Routers on the Internet are able to move packets through various paths to reach their final destination, even when some connections have failed. This characterizes the fault-tolerant nature of routing. | . A social media site allows users to send messages to each other. A group of researchers gathered user data for the first 10 years of the site’s existence. Some of the data are summarized in the table below, along with some of the company milestones. The researchers noticed that the total number of registered users appears to be increasing at about a constant rate. If this pattern continues, which of the following best approximates the total number of registered users, in millions, in year 12 (two years after the last entry in the table) ? | 30.6Explanation: The approximation 30.6 million would be a better estimate for year 11. | 31.2The total number of registered users appears to be increasing by about 0.5 million each year, so in year 12, the number of users can be approximated at 31.2 million (30.2 + 0.5 + 0.5). | . | Program A and program B display a different number of values. | Program A and program B display the same number of values, but the values differ.Explanation: This option is correct. The programs each display ten values, but each value displayed by program B is one greater than thecorresponding value from program A. Program A displays 1 2 3 4 5 6 7 8 9 10 and program B displays 2 3 4 5 6 7 8 9 10 11. | . The grid below contains a robot represented as a triangle, initially facing up. The robot can move into a white or gray square but cannot move into a black region. The code segment below uses the procedure One word, Goal Reached, which evaluates to true if the robot is in the gray square and evaluates to falseotherwise. | Explanation: This code segment moves the robot up and down between its initial location and the square above its initial location. | Explanation: This code segment rotates right whenever there is an open square to the right. The robot will move forward from its initial location to the upper-left corner of the grid, then rotate right, then move forward to the upper-right corner of the grid, then rotate right, then move down two squares, then rotate right, then move forward to the gray square. | . Internet protocol version 4 (IPv4) represents each IP address as a 32-bit binary number. Internet protocol version 6 (IPv6) represents each IP address as a 128-bit binary number. Which of the following best describes the result of using 128-bit addresses instead of 32-bit addresses? | 2 to the fourth power times as many addresses are available. | 2 raised to the ninety sixth power times as many addresses are available.Explanation: With 32-bit addressing, IPv4 has 2 raised to the thirty second power possible addresses. With 128-bit addressing, IPv6 has 2 raised to the one hundred twenty eighth power possible addresses. Since 2 raised to the thirty second power times 2 raised to the ninety sixth power equals 2 raised to the one hundred twenty eighth power, IPv6 has 2 raised to the ninety sixth power times as many possible addresses as IPv4. | .",
            "url": "https://shruthim0.github.io/repository2/2023/04/18/2018mcq.html",
            "relUrl": "/2023/04/18/2018mcq.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz | Memory in GB: 6.8/7.5 GB | Storage in GB: 237 GB | OS: Windows 11 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: A physical piece of hardware. It will connect to another device, like a computer, to provide input. | Output devices: A physical piece of hardware that gives the result of the input | Program File: directory name of a standard folder in Microsoft Windows operating systems, applications that aren’t part of OS are installed here | Program Code: refers to the set of instructions written in a particular programming language | Processes: instance of a program running on a computer | Ports: virtual port where network connections start | Data File: A files that stores data which can be used by a computer app or system (ex. .db file) | Inspect Running Code: right click + inspect or for jupyter nb user breakpoint. Can help determine errors in code (debugging). | . The Internet . Watch/review College Board Daily Video for 4.1.1 . Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path: A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Route: Routing is the process of finding a path from sender to receiver. | Computer System: A computing system is a group of computing devices and programs working together for a common purpose. | Computer Device: A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | Bandwidth:The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. Bandwidth is usually measured in bits per second | Computer Network: A computer network is a type of computing system. A computer network is a group of interconnected computing devices capable of sending or receiving data. | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Open standards and protocols enable diff manufacturers/developers to build hardware and software that can communicate with hardware/software on the rest of the internet: TRUE | IETF is a task force used to enforce laws to keep manufacters out of the internet: FALSE | Routes are determined in advanced and aren’t flexible: FALSE | A protocol is an agreed upons et of rules that specify the behavior of a system: TRUE | UDP guarantees transfers and is faster: FALSE | The WWW is the internet: FALSE | HTTP is a protocol used by WWW: TRUE . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance false | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas . | Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) . go into dockerfile forflask see how manu workers are set up for gunicorn .",
            "url": "https://shruthim0.github.io/repository2/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "MCQ Test 4",
            "content": "Question My Answer Correct Answer . Which of the following is a characteristic of the fault-tolerant nature of routing on the Internet? | The ability to resolve errors in domain name system (DNS) lookupsExplanation:The ability to resolve errors in DNS lookups is not affected by how packets are routed. | The ability to provide data transmission even when some connections have failed.Explanation:Routers on the Internet are able to move packets through various paths to reach their final destination, even when some connections have failed. This characterizes the fault-tolerant nature of routing. | . A teacher stores the most recent quiz scores for her class in the list scores. The first element in the list holds the maximum possible number of points that can be awarded on the quiz, and each remaining element holds one student’s quiz score. Assume that scores contains at least two elements. Which of the following code segments will set the variable found to true if at least one student scored the maximum possible number of points on the quiz and will set found to false otherwise? | Explanation:This code segment traverses the list beginning with the second element, so it is correctly comparing only the student scores to the maximum possible score. However, the code segment will fail to check the last element in the list. When index is equal to the length of the list, the loop will terminate without comparing the last student score in the list to the maximum possible score. | Explanation: This code segment traverses the list beginning with the second element, so it is correctly comparing only student scores to the maximum possible score, which is found by accessing scores[1]. The variable found will only be set to true when a student’s score equals the maximum possible score. The code also sets the number of iterations to LENGTH(scores) - 1 to reflect that the first list element (maximum score) is skipped. | . Overall Comments . Need to review Unit 4 (The Internet) 4.1 a | 4.1 b | Fault tolerance | . | .",
            "url": "https://shruthim0.github.io/repository2/2023/04/02/mcqtest4.html",
            "relUrl": "/2023/04/02/mcqtest4.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # the output uses the same values as my_set, except removes any duplicates # outputs a list # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # A set cannot have duplicate values, just like how the values in a hashtable must be unique # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # list-- genre # dictionary -- tracks # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # create a set using the set() function # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . [&#39;Pop&#39;, &#39;Synth-pop&#39;] . Hacks . Answer ALL questions in the code segments | Create a venn diagram or other compare and contrast tool related to hashmaps. What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . HACKS . Venn diagam . Venn Diagram . My own dictionaries . albums = [ (&quot;Thriller&quot;, &quot;Michael Jackson&quot;, 1982, # First album list [ (1, &quot;The Girl Is Mine&quot;), (2, &quot;Billie Jean&quot;), (3, &quot;The Lady in My Life&quot;), (4, &quot;Baby Be Mine&quot;), (5, &quot;P.Y.Y.&quot;), (6, &quot;Human Nature&quot;), (7, &quot;Beat It&quot;), (8, &quot;Wanna Be Startin’ Somethin’&quot;), ] ), (&quot;Off the Wall&quot;, &quot;Michael Jackson&quot;, 1979, # Second album list [ (1, &quot;Girlfriend&quot;), (2, &quot;Workin’ Day and Night&quot;), (3, &quot;Don&#39;t Stop &#39;Til You Get Enough&quot;), (4, &quot;Burn This Disco Out&quot;), (5, &quot;It&#39;s the Falling in Love&quot;), (6, &quot;Off the Wall&quot;), (7, &quot;Get on the Floor&quot;), (8, &quot;She’s Out of My Life&quot;), (9, &quot;Get on the Floor&quot;), (10, &quot;Rock With You&quot;), ] ), (&quot;Bad&quot;, &quot;Michael Jackson&quot;, 1987, [ (1, &quot;I Just Can&#39;t Stop Loving You&quot;), (2, &quot;Another Part of Me&quot;), (3, &quot;Speed Demon&quot;), (4, &quot;Man in the Mirror&quot;), (5, &quot;Liberian Girl&quot;), (6, &quot;Just Good Friends&quot;), (7, &quot;Leave Me Alone&quot;), (8, &quot;Bad&quot;), (9, &quot;Dirty Diana&quot;), (10, &quot;The Way You Make Me Feel&quot;), (11, &quot;Smooth Criminal&quot;), ] ), ] print(&quot;Here are the albums n 1. Thriller n 2. Off the Wall n 3. Bad n n &quot;) album = int(input(&quot;Choose an album enter its corresponding number&quot;)) print(&quot;Here are the songs from&quot; , album, &quot;: n n &quot;) print(albums[album-1]) song = int(input(&quot;Choose a song from your chosen album&quot;)) print(&quot;Playing&quot; , albums[album - 1][3][song - 1]) . Here are the albums 1. Thriller 2. Off the Wall 3. Bad Here are the songs from 1 : (&#39;Thriller&#39;, &#39;Michael Jackson&#39;, 1982, [(1, &#39;The Girl Is Mine&#39;), (2, &#39;Billie Jean&#39;), (3, &#39;The Lady in My Life&#39;), (4, &#39;Baby Be Mine&#39;), (5, &#39;P.Y.Y.&#39;), (6, &#39;Human Nature&#39;), (7, &#39;Beat It&#39;), (8, &#39;Wanna Be Startin’ Somethin’&#39;)]) Playing (2, &#39;Billie Jean&#39;) . Midnights Album . midnights_album = { &quot;title&quot;: &quot;Midnights&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2022, &quot;genre&quot;: [&quot;Alternative/Indie&quot;, &quot;Synth-pop&quot;, &quot;Holiday&quot;,&quot;Pop&quot;], &quot;tracks&quot;: { 1: [&quot;Lavender Haze&quot;, &quot;Meet me at midnight&quot;], 2: [&quot;Maroon&quot;,&quot;When the morning came we were cleaning incense off your vinyl shelf&quot;], 3: [&quot;Anti-Hero&quot;,&quot;I have this thing where I get older but just never wiser&quot;], 4: [&quot;Snow On The Beach (feat. Lana Del Rey)&quot;,&quot;One night a few moons ago I&quot;], 5: [&quot;You&#39;re On Your Own, Kid&quot;,&quot;Summer went away, still the yearning stays&quot;], 6: [&quot;Midnight Rain&quot;, &quot;Rain, he wanted it comfortable&quot;], 7: [&quot;Question...?&quot;,&quot;I remember&quot;], 8: [&quot;Vigilante Shit&quot;, &quot;Draw the cat eye, sharp enough to kill a man&quot;], 9: [&quot;Bejewled&quot;,&quot;Baby love, I think I&#39;ve been a little too kind&quot;], 10: [&quot;Labyrinth&quot;, &quot;It only hurts this much right now&quot;], 11: [&quot;Karma&quot;,&quot;You&#39;re talking shit for the hell of it&quot;], 12: [&quot;Sweet Nothing&quot;, &quot;I spy with my little tired eye&quot;], 13: [&quot;Mastermind&quot;,&quot;Once upon a time&quot;] } } # What data structures do you see? # list-- genre # dictionary -- tracks # Printing the dictionary print(midnights_album) . {&#39;title&#39;: &#39;Midnights&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2022, &#39;genre&#39;: [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: [&#39;Lavender Haze&#39;, &#39;Meet me at midnight&#39;], 2: [&#39;Maroon&#39;, &#39;When the morning came we were cleaning incense off your vinyl shelf&#39;], 3: [&#39;Anti-Hero&#39;, &#39;I have this thing where I get older but just never wiser&#39;], 4: [&#39;Snow On The Beach (feat. Lana Del Rey)&#39;, &#39;One night a few moons ago I&#39;], 5: [&#34;You&#39;re On Your Own, Kid&#34;, &#39;Summer went away, still the yearning stays&#39;], 6: [&#39;Midnight Rain&#39;, &#39;Rain, he wanted it comfortable&#39;], 7: [&#39;Question...?&#39;, &#39;I remember&#39;], 8: [&#39;Vigilante Shit&#39;, &#39;Draw the cat eye, sharp enough to kill a man&#39;], 9: [&#39;Bejewled&#39;, &#34;Baby love, I think I&#39;ve been a little too kind&#34;], 10: [&#39;Labyrinth&#39;, &#39;It only hurts this much right now&#39;], 11: [&#39;Karma&#39;, &#34;You&#39;re talking shit for the hell of it&#34;], 12: [&#39;Sweet Nothing&#39;, &#39;I spy with my little tired eye&#39;], 13: [&#39;Mastermind&#39;, &#39;Once upon a time&#39;]}} . for i in midnights_album[&quot;tracks&quot;]: print(&quot;Song #&quot; + str(i) + &quot;: &quot; + midnights_album[&quot;tracks&quot;][i][0]) print(&quot; First lyric: &quot; + &quot;&#39;&quot; + str(midnights_album[&quot;tracks&quot;][i][1])+ &quot;&#39;&quot;) print(&quot; Genres&quot; , midnights_album[&#39;genre&#39;]) . Song #1: Lavender Haze First lyric: &#39;Meet me at midnight&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #2: Maroon First lyric: &#39;When the morning came we were cleaning incense off your vinyl shelf&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #3: Anti-Hero First lyric: &#39;I have this thing where I get older but just never wiser&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #4: Snow On The Beach (feat. Lana Del Rey) First lyric: &#39;One night a few moons ago I&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #5: You&#39;re On Your Own, Kid First lyric: &#39;Summer went away, still the yearning stays&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #6: Midnight Rain First lyric: &#39;Rain, he wanted it comfortable&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #7: Question...? First lyric: &#39;I remember&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #8: Vigilante Shit First lyric: &#39;Draw the cat eye, sharp enough to kill a man&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #9: Bejewled First lyric: &#39;Baby love, I think I&#39;ve been a little too kind&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #10: Labyrinth First lyric: &#39;It only hurts this much right now&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #11: Karma First lyric: &#39;You&#39;re talking shit for the hell of it&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #12: Sweet Nothing First lyric: &#39;I spy with my little tired eye&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] Song #13: Mastermind First lyric: &#39;Once upon a time&#39; Genres [&#39;Alternative/Indie&#39;, &#39;Synth-pop&#39;, &#39;Holiday&#39;, &#39;Pop&#39;] .",
            "url": "https://shruthim0.github.io/repository2/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "CPT Finalization",
            "content": "Project Right Now . Currently the section of my project I was planning to use for CPT, the recipe generator, only take one input and one output. I plan to expand that. . | Changes . Image display: when the recipe is generated, an image will be outputted as well | Because I am not using the sqlite table for CPT, I need to make sure all by input cleaning is in frontend | Add another field option User can either enter mood or food group | . | . | . function generateLink() { const recipeLinks = [ &quot;https://www.foodnetwork.com/recipes/ina-garten/roast-chicken-recipe-1940592&quot;, &quot;https://www.allrecipes.com/recipe/27010/classic-beef-stroganoff/&quot;, &quot;https://www.epicurious.com/recipes/food/views/pork-tacos-with-pineapple-salsa-56389926&quot;, &quot;https://www.delish.com/uk/cooking/recipes/a31010080/chicken-alfredo-pasta-bake-recipe/&quot;, &quot;https://www.bbcgoodfood.com/recipes/ultimate-spaghetti-carbonara-recipe&quot;, &quot;https://www.simplyrecipes.com/recipes/banana_bread/&quot;, &quot;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&quot;, &quot;https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/&quot;, &quot;https://www.modernhoney.com/the-best-snickerdoodle-cookie-recipe/&quot;, &quot;https://www.allrecipes.com/recipe/82659/old-fashioned-onion-rings/&quot;, &quot;https://www.modernhoney.com/fettuccine-alfredo/&quot;, ]; const happy = [ &quot;https://www.foodnetwork.com/recipes/ina-garten/roast-chicken-recipe-1940592&quot;, &quot;https://www.allrecipes.com/recipe/27010/classic-beef-stroganoff/&quot;, &quot;https://www.epicurious.com/recipes/food/views/pork-tacos-with-pineapple-salsa-56389926&quot;, &quot;https://www.delish.com/uk/cooking/recipes/a31010080/chicken-alfredo-pasta-bake-recipe/&quot;, &quot;https://www.bbcgoodfood.com/recipes/ultimate-spaghetti-carbonara-recipe&quot;, &quot;https://www.simplyrecipes.com/recipes/banana_bread/&quot;, &quot;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&quot;, &quot;https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/&quot;, &quot;https://www.modernhoney.com/the-best-snickerdoodle-cookie-recipe/&quot;, &quot;https://www.allrecipes.com/recipe/82659/old-fashioned-onion-rings/&quot;, &quot;https://www.modernhoney.com/fettuccine-alfredo/&quot;, ]; const sad = [ &quot;https://www.foodnetwork.com/recipes/ina-garten/roast-chicken-recipe-1940592&quot;, &quot;https://www.allrecipes.com/recipe/27010/classic-beef-stroganoff/&quot;, &quot;https://www.epicurious.com/recipes/food/views/pork-tacos-with-pineapple-salsa-56389926&quot;, &quot;https://www.delish.com/uk/cooking/recipes/a31010080/chicken-alfredo-pasta-bake-recipe/&quot;, &quot;https://www.bbcgoodfood.com/recipes/ultimate-spaghetti-carbonara-recipe&quot;, &quot;https://www.simplyrecipes.com/recipes/banana_bread/&quot;, &quot;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&quot;, &quot;https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/&quot;, &quot;https://www.modernhoney.com/the-best-snickerdoodle-cookie-recipe/&quot;, &quot;https://www.allrecipes.com/recipe/82659/old-fashioned-onion-rings/&quot;, &quot;https://www.modernhoney.com/fettuccine-alfredo/&quot;, ]; const stressed = [ &quot;https://www.foodnetwork.com/recipes/ina-garten/roast-chicken-recipe-1940592&quot;, &quot;https://www.allrecipes.com/recipe/27010/classic-beef-stroganoff/&quot;, &quot;https://www.epicurious.com/recipes/food/views/pork-tacos-with-pineapple-salsa-56389926&quot;, &quot;https://www.delish.com/uk/cooking/recipes/a31010080/chicken-alfredo-pasta-bake-recipe/&quot;, &quot;https://www.bbcgoodfood.com/recipes/ultimate-spaghetti-carbonara-recipe&quot;, &quot;https://www.simplyrecipes.com/recipes/banana_bread/&quot;, &quot;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&quot;, &quot;https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/&quot;, &quot;https://www.modernhoney.com/the-best-snickerdoodle-cookie-recipe/&quot;, &quot;https://www.allrecipes.com/recipe/82659/old-fashioned-onion-rings/&quot;, &quot;https://www.modernhoney.com/fettuccine-alfredo/&quot;, ]; const angry = [ &quot;https://www.foodnetwork.com/recipes/ina-garten/roast-chicken-recipe-1940592&quot;, &quot;https://www.allrecipes.com/recipe/27010/classic-beef-stroganoff/&quot;, &quot;https://www.epicurious.com/recipes/food/views/pork-tacos-with-pineapple-salsa-56389926&quot;, &quot;https://www.delish.com/uk/cooking/recipes/a31010080/chicken-alfredo-pasta-bake-recipe/&quot;, &quot;https://www.bbcgoodfood.com/recipes/ultimate-spaghetti-carbonara-recipe&quot;, &quot;https://www.simplyrecipes.com/recipes/banana_bread/&quot;, &quot;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&quot;, &quot;https://www.abeautifulplate.com/the-best-homemade-margherita-pizza/&quot;, &quot;https://www.modernhoney.com/the-best-snickerdoodle-cookie-recipe/&quot;, &quot;https://www.allrecipes.com/recipe/82659/old-fashioned-onion-rings/&quot;, &quot;https://www.modernhoney.com/fettuccine-alfredo/&quot;, ]; // Generate a recipe link based on what emotion user picked const randomLink = recipeLinks[Math.floor(Math.random() * recipeLinks.length)]; // Display the recipe link const recipeLink = document.getElementById(&quot;recipe-link&quot;); recipeLink.innerHTML = &quot;Here&#39;s a recipe perfect for your mood!_&gt;&quot;+&quot;&lt;a href=&#39;&quot; + randomLink + &quot;&#39;&gt;&quot; + randomLink + &quot;&lt;/a&gt;&quot;; } .",
            "url": "https://shruthim0.github.io/repository2/2023/03/26/cptfinal.html",
            "relUrl": "/2023/03/26/cptfinal.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . A programmer should want to optimize both time and space. Take the least time and space, but still have a viable result. Big O- O(n) is the complexity representation for algorithms . | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 # baseWidth = 5000 # see the effect of doubling or halfing the baseWidth # baseWidth = 10000 # baseWidth = 20000 # baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Do you think this is a time complexity or space complexity or both problem? . Both, space&gt; number of pixels, time&gt; time it took to run and get the image. | . Big O Notation . Constant O(1): Constant | Linear O(n): As n increases so will time | Quadratic O(n^2): 2 loops nested inside of eachother (i loop &amp; j loop) | Logarithmic O(logn): | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . #prints the number at index 263 print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . # Start with 2 numbers, then creating a third that needs a place to be stored #function that takes the sum of two numbers def sum(a, b): return a + b print(sum(90,88)) print(sum(.9,.88)) . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) #just 1 for loop . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) #started with og list, created new reverse list #new list needs space . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) #2 loops # 1000*1000 . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) #print(fibonacci(30)) print(fibonacci(40)) #algorithm where you have to start over from beginning each time . 102334155 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3,])) print(generate_subsets([1,2,3,4,5,6])) #print(generate_subsets(numbers)) #huge difference (large growth) . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 4.936901330947876 seconds 9227465 Time taken: 7.153420686721802 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | Why is time and space complexity important when choosing an algorithm? If an algorithm takes too long or if it takes too much space, it is not an efficient way to solve the given problem. An effective algorithm should take a realistic amount of time and space (given the circumstances). For example, if | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? No. Depends on what kind of inputs will be used. In general, exponential algorithms work well when the inputs are small. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? Look for nested loops. Nested loops usually increase time/complexity. See what output is generated. If the output is a single variable/new value that is O(n). | . | . Complete the Time and Space Complexity analysis questions linked below. Practice . Research+Notes . 1. Constant O(1) . 2. Linear O(n) . 3. Quadratic O(n^2) . 4. Logarithmic O(logn) . 5. Exponential O(2^n) . Answering Code Questions . #1 a = 0 b = 0 for i in range(N): a = a + random() for i in range(M): b= b + random() #2 a = 0; for i in range(N): for j in reversed(range(i,N)): a = a + i + j; #3 k = 0; for i in range(n//2,n): for j in range(2,n,pow(2,j)): k = k + n / 2; #4: What does it mean when we say that an algorithm X is asymptotically more efficient than Y? #5 a = 0 i = N while (i &gt; 0): a += i i //= 2 } #6: Which of the following best describes the useful criterion for comparing the efficiency of algorithms? # Time # Memory # Both of the above # None of the above #7 How is time complexity measured? # By counting the number of algorithms in an algorithm. # By counting the number of primitive operations performed by the algorithm on a given input size. # By counting the size of data input to the algorithm. # None of the above #8 for i in range(n): i=i*k #9 value = 0; for i in range(n): for j in range(i): value=value+1 #10: Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. . O(N + M) time, O(1) space . 2 loops that are independent from eachother (not nested), therefore just add | only singular variables are created--&gt; constant space taken | . | O(N*N) . loop inside of a loop (nested) therefore n^2 | . | O(N log N) . j will double until it is less than or equal to n. Less than n means also less than long(n) | . | I do not know . Answer: X will always be a better choice for large inputs | &quot;In asymptotic analysis, we consider the growth of the algorithm in terms of input size. An algorithm X is said to be asymptotically better than Y if X takes smaller time than y for all input sizes n larger than a value n0 where n0 &gt; 0&quot; | . | O(N / 2) . Correct answer: O(log N) | &quot;We have to find the smallest x such that ‘(N / 2^x )&lt; 1 OR 2^x &gt; N’ = log(N)&quot; | . | Both of the above . Both managing time and space are neccesary for a good algorithm | . | By counting the number of primitive operations performed by the algorithm on a given input size. . number of operation the algorithm needs to perform based on the size of the input, wll show efficiency and complexity. | . | O(lognk) . i increases by i*k each time, it will loop for K^(n-1). Convert into log form | . | n(n-1) . i loop will run for n times &amp; j be run for (n-1) times | . | False . Not for all values of n | . |",
            "url": "https://shruthim0.github.io/repository2/2023/03/22/spacetime.html",
            "relUrl": "/2023/03/22/spacetime.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Big Idea 2 Quiz",
            "content": "Score: 25/25 . Questions I struggled with . Question Explanation . A binary number is to be transformed by appending three 0s to the end of the number. For example, 11101 is transformed to 11101000. Which of the following correctly describes the relationship between the transformed number and the original number?A: The transformed number is 8 times the value of the original number. | At first I thought the new number would only be 4 times the original because the the 2^0 place would&#39;nt have any affect. But no, the effect it has is still 2^3 | . The owner of a clothing store records the following information for each transaction made at the store during a 7-day period.The date of the transactionThe method of payment used in the transactionThe number of items purchased in the transactionThe total amount of the transaction, in dollarsCustomers can pay for purchases using cash, check, a debit card, or a credit card.Using only the data collected during the 7-day period, which of the following statements is true?A: The total number of items purchased on a given date can be determined by searching the data for all transactions that occurred on the given date and then adding the number of items purchased for each matching transaction. | | . Questions I found easier . Compared to previous times, the questions asked about what would be then nevt binary number, were much easier. | . Questions I have . I am not sure if I am taking too much time on the binary questions. Usually what I do is convert the given binary value to decimal, and then do the same for each anser choice until I get the decimal value I need. Is there a better way to approach these questions? | . Overall . I am getting better at understanding the information and vocabulary. Now I need to improve my speed. | .",
            "url": "https://shruthim0.github.io/repository2/2023/03/21/bigidea2quiz.html",
            "relUrl": "/2023/03/21/bigidea2quiz.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - Defines how data is organized within a relational database. . What is the purpose of identity Column in SQL database? A way to differentiate each column (unique to each) | . | What is the purpose of a primary key in SQL database? To extract data from a table that is visited more than once during a process. | . | What are the Data Types in SQL table? String, numeric (integer), post (where you could directly put in a python dictionary) | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? How you connecting to a database. Equivalent to a network connection to the database server | . | Same for cursor object? A database object to retrieve data one row at a time. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? Yes, because it has data and functions. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM favrecipes&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (2, &#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, &#39;Claire&#39;, &#39;Apple Pie&#39;, 8, &#39;Crust was very smooth&#39;) (3, &#39;https://www.loveandlemons.com/brownies-recipe/&#39;, &#39;Grace&#39;, &#39;Brownies&#39;, 9, &#39;So delicious&#39;) (4, &#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, &#39;Jasmine&#39;, &#39;Chocolate Cake&#39;, 9, &#39;Thought the filling was perfect&#39;) (5, &#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, &#39;Katelyn&#39;, &#39;Chocolate Chip Cookies&#39;, 10, &#39;Really good recipe, loved&#39;) (6, &#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, &#39;Shruthi&#39;, &#39;Lemon Meringue Pie&#39;, 8, &#39;Really good recipe, would definitely recommend&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? 2b is shorter than 2a, more straightforward. | . | Explain purpose of SQL INSERT. It is an SQL command that will insert the givene value into that table row+column | . | . import sqlite3 def create(): recipelink = input(&quot;Enter your recipe link:&quot;) recipename = input(&quot;Enter your recipe name:&quot;) name = input(&quot;Enter your name:&quot;) rating = input(&quot;Enter your rating:&quot;) comments = input(&quot;Enter your comments:&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO favrecipes (_recipelink, _recipename, _name, _rating, _comments) VALUES (?, ?, ?, ?, ?)&quot;, (recipelink, recipename, name, rating, comments)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {name} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record Jay has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? If the user tries to update their password to something smaller than 2 in length, then the pwd will instead be updated to be &#39;gothackednewpassword123&#39; | . | Explain try/except, when would except occur? The except error would occur when an sqlite3 error occured, opposed to an error regarding the uid not being found. | . | What code seems to be repeated in each of these examples to point, why is it repeated? conn = sqlite3.connect(database) | cursor = conn.cursor() | To connect to the sqlite database file, and create a cursor object (so that SQL commands can be used), these lines must be repeated in every code cell | . | . import sqlite3 def update(): uid = input(&quot;Enter recipe link&quot;) password = input(&quot;Enter updated rec&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? Yes, because data is lost, and the action is often irreversible | . | In the print statemements, what is the &quot;f&quot; and what does {uid} do? &quot;f&quot; is, | {uid} will be replaced with the value for the variable, uid, the uid the user entered. | . | . import sqlite3 def delete(): name = input(&quot;Enter user name to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM scores1 WHERE _name = ?&quot;, (name,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No name {name} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with name {name} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? Recursion:the calls itself, but there is a special key (esc key in this case) that allows exit | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://shruthim0.github.io/repository2/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "2.4 HACKS",
            "content": "Imports and Flask Objects . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model definition . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; # Define the Score class to manage actions in the &#39;score&#39; table class Review(db.Model): __tablename__ = &#39;favrecipes&#39; # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _recipelink = db.Column(db.String(255), unique=True, nullable=False) _name = db.Column(db.String(255), unique=False, nullable=False) _recipename = db.Column(db.String(255), unique=False, nullable=False) _rating = db.Column(db.Integer, unique=False, nullable=False) _comments = db.Column(db.String(255), unique=False, nullable=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, recipelink, recipename, name, rating, comments): self._recipelink = recipelink # variables with self prefix become part of the object, self._recipename = recipename self._name = name self._rating = rating self._comments = comments #recipelink getter @property def recipelink(self): return self._recipelink #recipelink setter @recipelink.setter def recipelink(self, recipelink): self._recipelink = recipelink def is_recipelink(self, recipelink): return self._recipelink == recipelink #name setter @property def name(self): return self._name #name getter @name.setter def name(self, name): self._name = name #recipename getter @property def recipename(self): return self._recipelink #recipename setter @recipename.setter def recipename(self, recipename): self._recipename = recipename # rating getter @property def rating(self): return self._rating #rating setter @rating.setter def rating(self, rating): self._rating = rating #comments getter @property def comments(self): return self._comments #comments setter @comments.setter def comments(self, comments): self._comments = comments @property def __str__(self): return json.dumps(self.read()) def create(self): try: # creates a person object from Score(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;recipelink&quot;: self.recipelink, &quot;recipename&quot;: self.recipename, &quot;name&quot;: self.name, &quot;rating&quot;: self.rating, &quot;comments&quot;: self.comments, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, rating=&quot;&quot;, comments=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(rating) &gt; 0: self.rating = rating if len(comments) &gt; 0: self.comments = comments db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initReview(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Review(recipelink=&#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, recipename= &quot;Lemon Meringue Pie&quot;, name=&#39;Shruthi&#39;, rating=&#39;8&#39;, comments=&#39;Really good recipe, would definitely recommend&#39;) u2 = Review(recipelink=&#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, recipename= &quot;Apple Pie&quot;, name=&#39;Claire&#39;, rating=&#39;8&#39;, comments=&#39;Crust was very smooth&#39;) u3 = Review(recipelink=&#39;https://www.loveandlemons.com/brownies-recipe/&#39;, recipename= &quot;Brownies&quot;, name=&#39;Grace&#39;, rating=&#39;9&#39;, comments=&#39;So delicious&#39;) u4 = Review(recipelink=&#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, recipename= &quot;Chocolate Cake&quot;, name=&#39;Jasmine&#39;, rating=&#39;9&#39;, comments=&#39;Thought the filling was perfect&#39;) u5 = Review(recipelink=&#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, recipename= &quot;Chocolate Chip Cookies&quot;, name=&#39;Katelyn&#39;, rating=&#39;10&#39;, comments=&#39;Really good recipe, loved&#39;) users = [u1, u2, u3, u4, u5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new rating {object.recipelink}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist for recipe {user.recipelink}, or error.&quot;) initReview() . Records exist for recipe https://sallysbakingaddiction.com/lemon-meringue-pie/, or error. Records exist for recipe https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423, or error. Records exist for recipe https://www.loveandlemons.com/brownies-recipe/, or error. Records exist for recipe https://addapinch.com/the-best-chocolate-cake-recipe-ever/, or error. Records exist for recipe https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/, or error. . Check for credentials . find by recipe | find by name | . def find_by_recipelink(recipelink): with app.app_context(): user = Review.query.filter_by(_recipelink=recipelink).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(recipelink, name): # query email and return user record user = find_by_recipelink(recipelink) if user == None: return False if (user.is_name(name)): return True return False def find_by_name(name): with app.app_context(): user = Review.query.filter_by(_name=name).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(name): # query email and return user record user = find_by_recipelink(name) if user == None: return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create . def create(): # optimize user time to see if uid exists recipelink = input(&quot;Enter your recipe link:&quot;) recipelink = find_by_recipelink(recipelink) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter YOUR name:&quot;) recipename = input(&quot;Enter your recipe name:&quot;) comments = input(&quot;Enter any comments you have about this recipe:&quot;) rating = input(&quot;Rate this recipe 1-10&quot;) # Initialize User object user = Review(name=name, recipelink=recipelink, recipename=recipename, comments=comments, rating=rating ) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # if link already exists print(&quot;Someone has already entered this {name}&quot;) create() . Someone has already entered this {name} . Read . def read(): with app.app_context(): table = Review.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 2, &#39;recipelink&#39;: &#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, &#39;recipename&#39;: &#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, &#39;name&#39;: &#39;Claire&#39;, &#39;rating&#39;: 8, &#39;comments&#39;: &#39;Crust was very smooth&#39;}, {&#39;id&#39;: 3, &#39;recipelink&#39;: &#39;https://www.loveandlemons.com/brownies-recipe/&#39;, &#39;recipename&#39;: &#39;https://www.loveandlemons.com/brownies-recipe/&#39;, &#39;name&#39;: &#39;Grace&#39;, &#39;rating&#39;: 9, &#39;comments&#39;: &#39;So delicious&#39;}, {&#39;id&#39;: 4, &#39;recipelink&#39;: &#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, &#39;recipename&#39;: &#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, &#39;name&#39;: &#39;Jasmine&#39;, &#39;rating&#39;: 9, &#39;comments&#39;: &#39;Thought the filling was perfect&#39;}, {&#39;id&#39;: 5, &#39;recipelink&#39;: &#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, &#39;recipename&#39;: &#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, &#39;name&#39;: &#39;Katelyn&#39;, &#39;rating&#39;: 10, &#39;comments&#39;: &#39;Really good recipe, loved&#39;}, {&#39;id&#39;: 6, &#39;recipelink&#39;: &#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, &#39;recipename&#39;: &#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, &#39;name&#39;: &#39;Shruthi&#39;, &#39;rating&#39;: 8, &#39;comments&#39;: &#39;Really good recipe, would definitely recommend&#39;}, {&#39;id&#39;: 7, &#39;recipelink&#39;: &#39;https://www.delish.com/cooking/recipe-ideas/g269/homemade-pizza-recipes/&#39;, &#39;recipename&#39;: &#39;https://www.delish.com/cooking/recipe-ideas/g269/homemade-pizza-recipes/&#39;, &#39;name&#39;: &#39;Jay&#39;, &#39;rating&#39;: 6, &#39;comments&#39;: &#39;Variety good&#39;}] . Update . def update(): # optimize user time to see if uid exists recipelink = input(&quot;Enter your recipe link:&quot;) user = find_by_recipelink(recipelink) if user is None: print(f&quot;User {recipelink} is not found :(&quot;) return new_name = input(&quot;What is your new name: &quot;) new_rating = input(&quot;What is your new rating: &quot;) new_comments = input(&quot;What are your new comments: &quot;) with app.app_context(): try: user.update(new_name, new_rating, new_comments) print(f&quot;Recipe link, {recipelink}, has been updated with the name, {new_name}, with the rating {new_rating}, and the comments, {new_comments}&quot;) except: print(f&quot;There was an problem in updating recipe, {recipelink}&quot;) update() . Recipe link, https://www.loveandlemons.com/brownies-recipe/, has been updated with the name, Shruthi, with the rating 9, and the comments, YUM! . Delete . def delete(): # optimize user time to see if uid exists recipelink = input(&quot;Enter your recipe link:&quot;) user = find_by_recipelink(recipelink) if user is None: print(f&quot;Recipe, {recipelink} is not found :(&quot;) with app.app_context(): try: user.delete() print(f&quot;Recipe, {recipelink} has been deleted.&quot;) except: print(&quot;Enter a recipe link that already exists&quot;) delete() . Recipe, https://thestayathomechef.com/the-most-amazing-chocolate-cake/ is not found :( Enter a recipe link that already exists . Sqlite . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM favrecipes&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (2, &#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, &#39;Claire&#39;, &#39;Apple Pie&#39;, 8, &#39;Crust was very smooth&#39;) (3, &#39;https://www.loveandlemons.com/brownies-recipe/&#39;, &#39;Grace&#39;, &#39;Brownies&#39;, 9, &#39;So delicious&#39;) (4, &#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, &#39;Jasmine&#39;, &#39;Chocolate Cake&#39;, 9, &#39;Thought the filling was perfect&#39;) (5, &#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, &#39;Katelyn&#39;, &#39;Chocolate Chip Cookies&#39;, 10, &#39;Really good recipe, loved&#39;) (6, &#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, &#39;Shruthi&#39;, &#39;Lemon Meringue Pie&#39;, 8, &#39;Really good recipe, would definitely recommend&#39;) (7, &#39;https://www.delish.com/cooking/recipe-ideas/g269/homemade-pizza-recipes/&#39;, &#39;Jay&#39;, &#39;75 Different Pizzas&#39;, 6, &#39;Variety good&#39;) . import sqlite3 def create(): recipelink = input(&quot;Enter your recipe link:&quot;) recipename = input(&quot;Enter your recipe name:&quot;) name = input(&quot;Enter your name:&quot;) rating = input(&quot;Enter your rating:&quot;) comments = input(&quot;Enter your comments:&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO favrecipes (_recipelink, _recipename, _name, _rating, _comments) VALUES (?, ?, ?, ?, ?)&quot;, (recipelink, recipename, name, rating, comments)) # Commit the changes to the database conn.commit() print(f&quot;A new recipe record {recipelink} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new recipe record https://cooking.nytimes.com/recipes/11823-strawberry-shortcake has been created . import sqlite3 def update(): recipelink = input(&quot;Enter recipe link&quot;) comments = input(&quot;Enter new comments&quot;) if len(comments) &lt; 2: message = &quot;hacked&quot; comments = &#39;-&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE favrecipes SET _comments = ? WHERE _recipelink = ?&quot;, (comments, recipelink)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;Recipe, {recipelink} was not found in the table&quot;) else: print(f&quot;The row with recipe, {recipelink} the comments has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with recipe, https://cooking.nytimes.com/recipes/11823-strawberry-shortcake the comments has been successfully updated . import sqlite3 def delete(): recipelink = input(&quot;Enter recipelink to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM favrecipes WHERE _recipelink = ?&quot;, (recipelink,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No recipe {recipelink} was found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with recipe, {recipelink} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with recipe, https://cooking.nytimes.com/recipes/11823-strawberry-shortcake was successfully deleted . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) #tested R . (2, &#39;https://www.foodnetwork.com/recipes/food-network-kitchen/apple-pie-recipe-2011423&#39;, &#39;Claire&#39;, &#39;Apple Pie&#39;, 8, &#39;Crust was very smooth&#39;) (3, &#39;https://www.loveandlemons.com/brownies-recipe/&#39;, &#39;Grace&#39;, &#39;Brownies&#39;, 9, &#39;So delicious&#39;) (4, &#39;https://addapinch.com/the-best-chocolate-cake-recipe-ever/&#39;, &#39;Jasmine&#39;, &#39;Chocolate Cake&#39;, 9, &#39;Thought the filling was perfect&#39;) (5, &#39;https://joyfoodsunshine.com/the-most-amazing-chocolate-chip-cookies/&#39;, &#39;Katelyn&#39;, &#39;Chocolate Chip Cookies&#39;, 10, &#39;Really good recipe, loved&#39;) (6, &#39;https://sallysbakingaddiction.com/lemon-meringue-pie/&#39;, &#39;Shruthi&#39;, &#39;Lemon Meringue Pie&#39;, 8, &#39;Really good recipe, would definitely recommend&#39;) (7, &#39;https://www.delish.com/cooking/recipe-ideas/g269/homemade-pizza-recipes/&#39;, &#39;Jay&#39;, &#39;75 Different Pizzas&#39;, 6, &#39;Variety good&#39;) (8, &#39;https://natashaskitchen.com/banana-pudding/&#39;, &#39;Shruthi&#39;, &#39;Banana Pudding&#39;, 9, &#39;Delicious!!!&#39;) .",
            "url": "https://shruthim0.github.io/repository2/2023/03/16/2.4.html",
            "relUrl": "/2023/03/16/2.4.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object:implements a WSGI application and acts as the central object. It is passed the name of the module or package of the application. Once it is created it will act as a central registry for the view functions, the URL rules, template configuration and much more. 2. SQLAlchemy db object: SQLAlchemy is a library that facilitates the communication between Python programs and databases. | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User:Classes provide a means of bundling data and functionality together. User has many attributes, such as uid, name... - db.Model inheritance: A model where an entity (often called the child entity) is derived (it inherits) from another entity (the parent entity). They get passed down. | init method: The init function is called every time an object is created from a class. The init method lets the class initialize the object&#39;s attributes and serves no other purpose. | @property, @&lt;column&gt;.setter: Pythonic way to use getters and setters | create, read, update, delete methods: Methods to manipulate the data in a given database. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; # Define the Score class to manage actions in the &#39;score&#39; table class Scores(db.Model): __tablename__ = &#39;scores1&#39; # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _score = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, score, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._score = score if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name @property def score(self): return self._score @score.setter def score(self, score): self._score = score def is_score(self, score): return self._score == score @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def __str__(self): return json.dumps(self.read()) def create(self): try: # creates a person object from Score(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;score&quot;: self.score, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, score=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(score) &gt; 0: self.score = score db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except:If the try does not work, then the except will be executed. ORM= | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; def initScores(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; # db.init_app(app) db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Score(name=&#39;Shruthi&#39;, score=&#39;2&#39;,dob=datetime(2006, 4, 14)) u2 = Score(name=&#39;Claire&#39;, score=&#39;3&#39;,dob=datetime(2005, 2, 11)) u3 = Score(name=&#39;Grace&#39;, score=&#39;1&#39;,dob=datetime(2005, 9, 11)) u4 = Score(name=&#39;Noor&#39;, score=&#39;5&#39;,dob=datetime(2004, 2, 11)) u5 = Score(name=&#39;Jiya&#39;, score=&#39;6&#39;,dob=datetime(2004, 8, 9)) u6 = Score(name=&#39;Kavya&#39;, score=&#39;1&#39;, dob=datetime(2009, 8, 30)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: #try to add new user &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new name {object.name}&quot;) except: # error raised if it does not work &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist name {user.name}, or error.&quot;) initScores() . Created new name Shruthi Created new name Claire Created new name Grace Created new name Noor Created new name Jiya Created new name Kavya . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by:filters through User, by a specific attribute. 2. user.password: Sets user&#39;s pwd. | | . def find_by_name(name): with app.app_context(): score = Score.query.filter_by(_name=name).first() # return score # returns user object # Check credentials by finding user and verify password def check_credentials(name,dob): user = find_by_name(name) if user == None: return False if (user.is_dob(dob)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except:Find a specific entry by searching by uid 2. user = User(...): initializes/sets the User object | user.dob and try/except: Creates the User attribute of dob. If DOB is set to be todays date, except will be run. | user.create() and try/except: Creates new user. Error will be raised if the user was not build. | | . def create(): # optimize user time to see if uid exists name = input(&quot;Enter your name:&quot;) user = find_by_name(name) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object score = input(&quot;Enter your score:&quot;) # Initialize User object before date user = Score(name=name, score=score, ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error score {score}&quot;) create() # tested &quot;Shruthi&quot; . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;Sarah&#39;, &#39;score&#39;: &#39;8&#39;, &#39;dob&#39;: &#39;01-09-2006&#39;, &#39;age&#39;: 17} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all searches through all the users in User | . | json_ready assignment, google List Comprehension List comprehensions provide a concise way to create list | . | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = Score.query.all() # json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Shruthi&#39;, &#39;score&#39;: &#39;2&#39;, &#39;dob&#39;: &#39;04-14-2006&#39;, &#39;age&#39;: 16}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Claire&#39;, &#39;score&#39;: &#39;3&#39;, &#39;dob&#39;: &#39;02-11-2005&#39;, &#39;age&#39;: 18}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Grace&#39;, &#39;score&#39;: &#39;1&#39;, &#39;dob&#39;: &#39;09-11-2005&#39;, &#39;age&#39;: 17}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Noor&#39;, &#39;score&#39;: &#39;5&#39;, &#39;dob&#39;: &#39;02-11-2004&#39;, &#39;age&#39;: 19}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Jiya&#39;, &#39;score&#39;: &#39;6&#39;, &#39;dob&#39;: &#39;08-09-2004&#39;, &#39;age&#39;: 18}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Kavya&#39;, &#39;score&#39;: &#39;1&#39;, &#39;dob&#39;: &#39;08-30-2009&#39;, &#39;age&#39;: 13}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Sarah&#39;, &#39;score&#39;: &#39;8&#39;, &#39;dob&#39;: &#39;01-09-2006&#39;, &#39;age&#39;: 17}] . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://shruthim0.github.io/repository2/2023/03/13/AP-unit2.4a.html",
            "relUrl": "/2023/03/13/AP-unit2.4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # &quot;Junior&quot;, &quot;9th Grade&quot; need to be cleaned # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # When data is enterd by users # ex. if user enters something with numbers into a field called &quot;Name&quot; . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 387], &quot;duration&quot;: [50, 40, 45, 35] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 387 35 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 387 35 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . My Hacks . 2.3 Questions . A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. | The researcher has access to a database with the following information about each student. . Last name First name Grade level (9, 10, 11, or 12) Grade point average (on a 0.0 to 4.0 scale) The researcher also has access to another database with the following information about each student. . First name Last name Number of absences from school Number of late arrivals to school . Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? . Answer: There will be many students at the school that share the same first name. Without a unique student ID, students with the same name may get confused with eachother. So if one student&#39;s GPA may get confused with anothers, which would cause the researcher&#39;s data and analysis to be incorrect. . A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? | Answer: Combining multiple data sets requires the involved data sets to have similar structures and calculations. One county may calculate pollution in different units (per sq acre vs per sq mile) than another county. County datasets may also differ in the frequency of data present. One county may have data on pollution for every year, but onther county may conduct that reaseach monthly. . A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? | Answer: Anytime when user&#39;s are able to manually type into a field, there is always a chance the data collected from that field has &quot;garbage&quot; in it. Users may spell the city name wrong, use an abbreviation, or use a city nickname. A more user friendly program would plan for events like there by, for example, not only having city names in their data, but also city abbreviations. . A database of information about shows at a concert venue contains the following information. | Name of artist performing at the show Date of show Total dollar amount of all tickets sold Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? . Answer: The average proce of tickets would be the most helpful in determining the artist with the greatest attendence. The attendance for a specific show can be calculated by dividing the dollar amount of tickets sold by the average ticket price would give you how many people have bought tickets for that show. . A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? | Answer: Only a visual would show the number of bicycles the car passed. Neither the car’s speed, the date, time, or the car’s GPS location would be able to indicate the number of bicycles the care passed. . A teacher sends students an anonymous survey in order to learn more about the students’ work habits. The survey contains the following questions. | On average, how long does homework take you each night (in minutes) ? On average, how long do you study for each test (in minutes) ? Do you enjoy the subject material of this class (yes or no) ? Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? . Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? . Answer: Option 3 requires data outside of the survey, specifically the student&#39; grades. Both I and II only require data from within the survey. . 1990 vs. 2017 Carbon Emissions per Nation . Purpose: . The purpose of this dataset is to investigate the Carbon emissions for nations in 2017 vs in 1990. It allows people to see which nations increased in their emissions, which decreased, which nations are the greatest contibuters... I found a dataset on Kaggle, which had CO2 emissions for years 1990--&gt;2018. I created a json file, but only used the &quot;Country&quot; &quot;1990 Carbon Emissions&quot; and &quot;2017 Carbon Emissions.&quot; . import pandas as pd df = pd.read_json(&#39;files/co2em.json&#39;) print(df) #print raw . Country Emissions1990 Emissions2017 0 Afghanistan 0.191745 0.131695 1 Angola 0.553662 0.813301 2 Albania 1.819542 1.788786 3 Andorra 7.521832 6.104134 4 United Arab Emirates 30.195189 20.769022 .. ... ... ... 89 Czechia 14.540000 10.230000 90 South Korea 5.777563 12.710000 91 Kazakhstan 14.512479 17.520000 92 Iceland 7.652280 10.480000 93 Turkmenistan 12.120051 12.290000 [94 rows x 3 columns] . print(df[[&#39;Country&#39;,&#39;Emissions1990&#39;,&#39;Emissions2017&#39;]].to_string(index=False)) #print data, but dont show index values . Country Emissions1990 Emissions2017 Afghanistan 0.191745 0.131695 Angola 0.553662 0.813301 Albania 1.819542 1.788786 Andorra 7.521832 6.104134 United Arab Emirates 30.195189 20.769022 Argentina 3.075541 4.071308 Armenia 5.610254 1.823560 American Samoa 0.540000 1.490000 Antigua and Barbuda 3.358227 5.239717 Australia 15.448488 15.818316 Austria 7.589364 7.486162 Azerbaijan 7.453451 3.243342 Burundi 0.031256 0.048952 Belgium 10.966775 8.151096 Benin 0.066285 0.614755 Burkina Faso 0.056747 0.222474 Bangladesh 0.111658 0.496852 Bulgaria 8.443170 6.201290 Bahrain 21.656413 20.427328 Bahamas 7.649467 5.684363 Bosnia and Herzegovina 5.370319 6.767051 Belarus 9.797487 5.921351 Belize 1.759493 1.703147 Bermunda 8.680000 6.990000 Bolivia 1.516423 2.032547 Brazil 1.328159 2.196418 Barbados 3.755753 4.122573 Brunei Barussalam 12.600787 21.640000 Bhutan 0.150716 1.301030 Botswana 2.183786 3.324148 Central African Republic 0.053443 0.047867 Canada 15.148890 15.544571 Switzerland 6.452219 4.578885 Chile 2.299125 4.714020 China 1.914543 7.230985 Cote d&#39;Ivoire 0.227256 0.432123 Cameroon 0.246178 0.373279 Congo, Dem. Rep. 0.091876 0.035013 Congo, Rep. 1.357808 1.058563 Colombia 1.472091 1.533229 Comoros 0.170069 0.344027 Cabo Verde 0.295899 1.097676 Costa Rica 0.920038 1.668702 Cuba 3.361333 2.314085 Cayman Islands 8.870000 2.310000 Cyprus 5.987352 6.230000 Czech Republic 14.535453 6.238954 Germany 12.026609 8.858294 Djibouti 0.457322 0.444868 Dominica 0.852006 2.378953 Denmark 10.132390 5.746768 Dominican Republic 1.101845 2.240060 Algeria 2.443430 3.825638 Ecuador 1.507194 2.296645 Egypt, Arab Rep. 1.563210 2.511650 Eritrea 0.194898 0.210965 Spain 5.530353 5.654254 Estonia 22.483166 12.684228 Ethiopia 0.048238 0.148684 Finland 10.941694 7.810154 Mexico 3.211460 3.790000 New Zealand 6.700102 7.520000 Fiji 0.947054 1.880428 France 6.117208 4.749543 Faroe Islands 0.030000 1.614915 Micronesia, Fed. Sts. 1.270938 1.614915 Gabon 4.318094 2.581349 United Kingdom 9.812990 5.555652 Georgia 6.974177 2.609976 Ghana 0.188855 0.584105 Gibraltar 4.930000 0.124352 Guinea 0.157424 0.276776 Gambia 0.198829 0.243913 Guinea-Bissau 0.174312 0.169571 Equaatorial Guinea 0.143134 4.595851 Greece 7.416058 6.211250 Grenada 1.141932 2.615582 Russia 14.620000 11.370000 Guatemala 0.434249 1.029997 Italy 7.145018 5.440000 India 0.645362 1.733361 United States 19.407346 14.823261 Qatar 26.329327 32.127990 Greenland 0.020000 9.690000 Saudi Arabia 10.558843 18.820000 Somalia 0.101037 0.040000 Kuwait 13.902212 23.290000 Trinidad and Tobago 10.768794 27.270000 Oman 6.577793 15.110000 Czechia 14.540000 10.230000 South Korea 5.777563 12.710000 Kazakhstan 14.512479 17.520000 Iceland 7.652280 10.480000 Turkmenistan 12.120051 12.290000 . print(df[[&#39;Emissions2017&#39;]]) print() #try 3 columns and remove the index from print statement print(df[[&#39;Emissions1990&#39;,&#39;Emissions2017&#39;,&#39;Country&#39;]].to_string(index=False)) . Emissions2017 0 0.131695 1 0.813301 2 1.788786 3 6.104134 4 20.769022 .. ... 89 10.230000 90 12.710000 91 17.520000 92 10.480000 93 12.290000 [94 rows x 1 columns] Emissions1990 Emissions2017 Country 0.191745 0.131695 Afghanistan 0.553662 0.813301 Angola 1.819542 1.788786 Albania 7.521832 6.104134 Andorra 30.195189 20.769022 United Arab Emirates 3.075541 4.071308 Argentina 5.610254 1.823560 Armenia 0.540000 1.490000 American Samoa 3.358227 5.239717 Antigua and Barbuda 15.448488 15.818316 Australia 7.589364 7.486162 Austria 7.453451 3.243342 Azerbaijan 0.031256 0.048952 Burundi 10.966775 8.151096 Belgium 0.066285 0.614755 Benin 0.056747 0.222474 Burkina Faso 0.111658 0.496852 Bangladesh 8.443170 6.201290 Bulgaria 21.656413 20.427328 Bahrain 7.649467 5.684363 Bahamas 5.370319 6.767051 Bosnia and Herzegovina 9.797487 5.921351 Belarus 1.759493 1.703147 Belize 8.680000 6.990000 Bermunda 1.516423 2.032547 Bolivia 1.328159 2.196418 Brazil 3.755753 4.122573 Barbados 12.600787 21.640000 Brunei Barussalam 0.150716 1.301030 Bhutan 2.183786 3.324148 Botswana 0.053443 0.047867 Central African Republic 15.148890 15.544571 Canada 6.452219 4.578885 Switzerland 2.299125 4.714020 Chile 1.914543 7.230985 China 0.227256 0.432123 Cote d&#39;Ivoire 0.246178 0.373279 Cameroon 0.091876 0.035013 Congo, Dem. Rep. 1.357808 1.058563 Congo, Rep. 1.472091 1.533229 Colombia 0.170069 0.344027 Comoros 0.295899 1.097676 Cabo Verde 0.920038 1.668702 Costa Rica 3.361333 2.314085 Cuba 8.870000 2.310000 Cayman Islands 5.987352 6.230000 Cyprus 14.535453 6.238954 Czech Republic 12.026609 8.858294 Germany 0.457322 0.444868 Djibouti 0.852006 2.378953 Dominica 10.132390 5.746768 Denmark 1.101845 2.240060 Dominican Republic 2.443430 3.825638 Algeria 1.507194 2.296645 Ecuador 1.563210 2.511650 Egypt, Arab Rep. 0.194898 0.210965 Eritrea 5.530353 5.654254 Spain 22.483166 12.684228 Estonia 0.048238 0.148684 Ethiopia 10.941694 7.810154 Finland 3.211460 3.790000 Mexico 6.700102 7.520000 New Zealand 0.947054 1.880428 Fiji 6.117208 4.749543 France 0.030000 1.614915 Faroe Islands 1.270938 1.614915 Micronesia, Fed. Sts. 4.318094 2.581349 Gabon 9.812990 5.555652 United Kingdom 6.974177 2.609976 Georgia 0.188855 0.584105 Ghana 4.930000 0.124352 Gibraltar 0.157424 0.276776 Guinea 0.198829 0.243913 Gambia 0.174312 0.169571 Guinea-Bissau 0.143134 4.595851 Equaatorial Guinea 7.416058 6.211250 Greece 1.141932 2.615582 Grenada 14.620000 11.370000 Russia 0.434249 1.029997 Guatemala 7.145018 5.440000 Italy 0.645362 1.733361 India 19.407346 14.823261 United States 26.329327 32.127990 Qatar 0.020000 9.690000 Greenland 10.558843 18.820000 Saudi Arabia 0.101037 0.040000 Somalia 13.902212 23.290000 Kuwait 10.768794 27.270000 Trinidad and Tobago 6.577793 15.110000 Oman 14.540000 10.230000 Czechia 5.777563 12.710000 South Korea 14.512479 17.520000 Kazakhstan 7.652280 10.480000 Iceland 12.120051 12.290000 Turkmenistan . #sort the values in greatest to least 1990 print(df.sort_values(by=[&#39;Emissions1990&#39;], ascending=False)) print() #sort the values in greatest to least 2017 print(df.sort_values(by=[&#39;Emissions2017&#39;], ascending=False)) print() . Country Emissions1990 Emissions2017 4 United Arab Emirates 30.195189 20.769022 82 Qatar 26.329327 32.127990 57 Estonia 22.483166 12.684228 18 Bahrain 21.656413 20.427328 81 United States 19.407346 14.823261 .. ... ... ... 30 Central African Republic 0.053443 0.047867 58 Ethiopia 0.048238 0.148684 12 Burundi 0.031256 0.048952 64 Faroe Islands 0.030000 1.614915 83 Greenland 0.020000 9.690000 [94 rows x 3 columns] Country Emissions1990 Emissions2017 82 Qatar 26.329327 32.127990 87 Trinidad and Tobago 10.768794 27.270000 86 Kuwait 13.902212 23.290000 27 Brunei Barussalam 12.600787 21.640000 4 United Arab Emirates 30.195189 20.769022 .. ... ... ... 70 Gibraltar 4.930000 0.124352 12 Burundi 0.031256 0.048952 30 Central African Republic 0.053443 0.047867 85 Somalia 0.101037 0.040000 37 Congo, Dem. Rep. 0.091876 0.035013 [94 rows x 3 columns] . print(df[df.Emissions1990 &gt; 20.00]) print() print(df[df.Emissions2017 &gt; 20.00]) . Country Emissions1990 Emissions2017 4 United Arab Emirates 30.195189 20.769022 18 Bahrain 21.656413 20.427328 57 Estonia 22.483166 12.684228 82 Qatar 26.329327 32.127990 Country Emissions1990 Emissions2017 4 United Arab Emirates 30.195189 20.769022 18 Bahrain 21.656413 20.427328 27 Brunei Barussalam 12.600787 21.640000 82 Qatar 26.329327 32.127990 86 Kuwait 13.902212 23.290000 87 Trinidad and Tobago 10.768794 27.270000 . print(&quot;Here are the nations with the most and least CO2 Emissions in 1990&quot;) print(df[df.Emissions1990 == df.Emissions1990.max()]) print() print(df[df.Emissions1990 == df.Emissions1990.min()]) print() print(&quot;Here are the nations with the most and least CO2 Emissions in 2017--&quot;) print(df[df.Emissions2017 == df.Emissions2017.max()]) print() print(df[df.Emissions2017 == df.Emissions2017.min()]) . Here are the nations with the most and least CO2 Emissions in 1990 Country Emissions1990 Emissions2017 4 United Arab Emirates 30.195189 20.769022 Country Emissions1990 Emissions2017 83 Greenland 0.02 9.69 Here are the nations with the most and least CO2 Emissions in 2017-- Country Emissions1990 Emissions2017 82 Qatar 26.329327 32.12799 Country Emissions1990 Emissions2017 37 Congo, Dem. Rep. 0.091876 0.035013 . mean = df[&quot;Emissions1990&quot;].mean() print(&quot;Average 1990 CO2 emissions per nation is&quot;, mean, &quot;metric tons per capita&quot;) #mean mean = df[&quot;Emissions2017&quot;].mean() print(&quot;Average 2017 CO2 emissions per nation is&quot;, mean, &quot;metric tons per capita&quot;) . Average 1990 CO2 emissions per nation is 5.649072744255316 metric tons per capita Average 2017 CO2 emissions per nation is 5.828730248755319 metric tons per capita . sum2017 = sum(df[&#39;Emissions2017&#39;]) sum1990 = sum(df[&#39;Emissions1990&#39;]) .",
            "url": "https://shruthim0.github.io/repository2/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . - What are commands you use in terminal to access files? . What are the command you use in Windows terminal to access files? cd, ls, ls -ltr | . | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? to access an image, you need to know where it is located | . | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL:- numpy: Used to manage images into a data structure. - base64: used to transfer images through api | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . google &quot;python pil right to image&quot; . Smiley face and pixel manipulation. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.jpg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 310 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;OG size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot;Grey!&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print(&quot;Purple&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_purple&#39;])) print() . - meta data -- Smiley Face Internet JPEG RGB Original size: (1920, 2560) Scaled size: (320, 426) -- original image -- . grey image - . . AP Prep . Data Compression Quiz . 2.3 Questions . Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? . A lossless compression algorithm can guarantee that compressed information is kept secure, while a lossy compression algorithm cannot. | A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. CORRECT | A lossless compression algorithm typically allows for faster transmission speeds than does a lossy compression algorithm. | A lossless compression algorithm typically provides a greater reduction in the number of bits stored or transmitted than does a lossy compression algorithm. | . | A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? . Compressing the file using a lossless compression algorithm before uploading it. CORRECT | Compressing the file using a lossy compression algorithm before uploading it | Compressing the file using both lossy and lossless compression algorithms before uploading it | Uploading the original file without using any compression algorithm | . | A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? . Lossless compression of video files will generally save more space than lossy compression of video files. | Lossless compression of an image file will generally result in a file that is equal in size to the original file. | Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. CORRECT | Sound clips compressed with lossy compression for storage on the platform can be restored to their original quality when they are played. | . | Image that will result in lossy data compression: . Image that will result in lossyless data compression: .",
            "url": "https://shruthim0.github.io/repository2/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "MCQ Test 3 (Tri 2 Final)",
            "content": "Reviewing Missed Questions . Question My Answer Correct Answer Explanation . Q22: Two grids are shown below. Each grid contains a robot represented as a triangle. Both robots are initially facing left. Each robot can move into a white or gray square, but cannot move into a black region. For each grid, the program below is intended to move the robot to the gray square. The program uses the procedure Goal_Reached ( ), which evaluates to true if the robot is in the gray square and evaluates to false otherwise. | Neither grid I not grid II | Grid I only | In Grid I, the robot moves forward to the end of the bottom row, turns right twice, moves forward twice, turns right twice, moves forward until the end of the middle row, turns left twice, moves forward twice, turns left twice, and moves forward until Goal_Reached is true. | . Q28: | tempString ← substring(oldString, 3, len(oldString) - 2)newString ← substring(tempString, 1, len(tempString) - 2)ANDnewString ← substring(oldString, 3, len(oldString) - 2) | tempString ← substring(oldString, 3, len(oldString) - 2)newString ← substring(tempString, 1, len(tempString) - 2)ANDnewString ← substring(oldString, 3, len(oldString) - 4) | First choice was correct, but second was not. To remove the first 2 characters of oldString, this code segment takes a substring starting at position 3. To remove the last 2 characters of oldString, the substring ends at the position that is 4 characters less than the length of oldString (since 4 characters are removed). | . Q50: | Algorithms A and B | Algorithms A and D | D: The number of steps for this algorithm is equal to the length of the list squared, as the number of steps is equal to n2 for a list of size n. This is an example of a polynomial efficiency and indicates that the algorithm runs in a reasonable amount of time.B (incorrect): As the size of the list grows, the number of steps needed to sort the list grows at an exponential rate, as the number of steps is equal to 2n for a list of size n. This indicates that the algorithm does not run in a reasonable amount of time. | . Topics I need to practice . 1.4, Identifying and Correcting Errors: AP Daily Video 1.4 A | AP Daily Video 1.4 B | AP Daily Video 1.4 C | . | 3.4, Strings: AP Daily Video 3.4 | . | 3.17, Algorithmic Efficiency: AP Daily Video 3.17 A | AP Daily Video 3.17 B | . | . Overall Comments . I did better on this MCQ than previous ones, but there are still some topics that I am not proficient in (Algorithmic Efficiency, Identifying Errors) and vocabulary I need to brush up on. I think by reviewing the AP Daily Videos, looking back at older lessons, and reviewing my vocab list will help me improve. .",
            "url": "https://shruthim0.github.io/repository2/2023/03/06/mcqtest3.html",
            "relUrl": "/2023/03/06/mcqtest3.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Trimester 2 N@M Blog",
            "content": "How it went . Our presentation went well. I finished deployment that day and we connected our frontends and backends. I was able to show my program as well as my READ and POST methods. . Improvements . The deployment process took a while and I was only able to bypass all the errors and finish an hour before our N@M slot. Next time I hope to start deployment sooner and run into fewer errors since I am now more familiar with the process. . Other classes I saw . I got to watch 2 jazz band performances which were very entertaining. I could tell they put lots of practice time in to make sure they did their best on performance day. | . I saw a group that made a car website and their graphics were amazing. . | Looked at the art station. So many of the pieces were so pretty and it amazed me how talented and creative so many people are. . | I also saw some other csp projects. I saw a group who made a period tracker program which I thought was a great idea that has many benefits. Their individual parts included having an ovulation tracker, period tracker, a quiz about periods too. . | Us presenting our team’s project . |",
            "url": "https://shruthim0.github.io/repository2/2023/02/27/tri2natmuseum.html",
            "relUrl": "/2023/02/27/tri2natmuseum.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Create Preformance Task Drafting",
            "content": "const quoteContainer = document.getElementById(&#39;quote-container&#39;); const quoteText = document.getElementById(&#39;quote&#39;); const authorText = document.getElementById(&#39;author&#39;); const newQuoteBtn = document.getElementById(&#39;new-quote&#39;); const loader = document.getElementById(&#39;loader&#39;); // Show Loading function loading() { loader.hidden = false; quoteContainer.hidden = true; } // Hide Loading function complete() { if (!loader.hidden) { quoteContainer.hidden = false; loader.hidden = true; } } // Get Quote From API async function getQuote() { loading(); const proxyUrl = &#39;https://whispering-tor-04671.herokuapp.com/&#39; const apiUrl = &#39;http://api.forismatic.com/api/1.0/?method=getQuote&amp;lang=en&amp;format=json&#39;; try { const response = await fetch(proxyUrl + apiUrl); const data = await response.json(); // If Author is blank, add &#39;Unknown&#39; if (data.quoteAuthor === &#39;&#39;) { authorText.innerText = &#39;Unknown&#39;; } else { authorText.innerText = data.quoteAuthor; } // Reduce font size for long quotes if (data.quoteText.length &gt; 120) { quoteText.classList.add(&#39;long-quote&#39;); } else { quoteText.classList.remove(&#39;long-quote&#39;); } quoteText.innerText = data.quoteText; // Stop Loader, Show Quote complete(); } catch (error) { getQuote(); } } // Tweet Quote function tweetQuote() { const quote = quoteText.innerText; const author = authorText.innerText; } // On Load getQuote(); . evalmachine.&lt;anonymous&gt;:22 async function getQuote() { ^^^^^^^^ SyntaxError: Unexpected token function at createScript (vm.js:56:10) at Object.runInThisContext (vm.js:97:10) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at emitTwo (events.js:106:13) at process.emit (events.js:191:7) at process.nextTick (internal/child_process.js:758:12) at _combinedTickCallback (internal/process/next_tick.js:73:7) at process._tickCallback (internal/process/next_tick.js:104:9) . const options = { method: &#39;GET&#39;, headers: { &#39;X-RapidAPI-Key&#39;: &#39;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&#39;, &#39;X-RapidAPI-Host&#39;: &#39;nutrition-by-api-ninjas.p.rapidapi.com&#39; } }; fetch(&#39;https://nutrition-by-api-ninjas.p.rapidapi.com/v1/nutrition?query=1lb%20brisket%20with%20fries&#39;, options) .then(response =&gt; response.json()) .then(response =&gt; console.log(response)) .catch(err =&gt; console.error(err)); . const axios = require(&quot;axios&quot;); const options = { method: &#39;GET&#39;, url: &#39;https://recipe-by-api-ninjas.p.rapidapi.com/v1/recipe&#39;, params: {query: &#39;italian wedding soup&#39;}, headers: { &#39;X-RapidAPI-Key&#39;: &#39;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&#39;, &#39;X-RapidAPI-Host&#39;: &#39;recipe-by-api-ninjas.p.rapidapi.com&#39; } }; axios.request(options).then(function (response) { console.log(response.data); }).catch(function (error) { console.error(error); }); . raw output . [ { &quot;title&quot;: &quot;Stracciatella (Italian Wedding Soup)&quot;, &quot;ingredients&quot;: &quot;3 1/2 c Chicken broth; homemade|1 lb Fresh spinach; wash/trim/chop|1 Egg|1 c Grated parmesan cheese; --or--|1 c Romano cheese; freshly grated|Salt and pepper; to taste&quot;, &quot;servings&quot;: &quot;4 servings&quot;, &quot;instructions&quot;: &quot;Bring 1 cup of the broth to a boil. Add spinach and cook until softened but still bright green. Remove spinach with a slotted spoon and set aside. Add remaining broth to pot. Bring to a boil. Meanwhile, beat egg lightly with a fork. Beat in 1/4 cup of cheese. When broth boils pour in egg mixture, stirring constantly for a few seconds until it cooks into &quot;rags. &quot; Add reserved spinach, salt and pepper. Serve immediately, passing remaining cheese. NOTES: Someone asked for this recipe a while back. I believe this soup, known as &quot;Stracciatella &quot; is synonymous with Italian Wedding Soup, however, I seem to remember from I-don&#39;t-know-where that Italian Wedding Soup is the same as this but with the addition of tiny meatballs.&quot; }, { &quot;title&quot;: &quot;Italian Wedding Soup&quot;, &quot;ingredients&quot;: &quot;1/2 lb Ground beef|1/2 lb Ground veal|1/4 c Italian seasoned bread crumb|1 Egg|1 tb Parsley|Salt and pepper to taste|4 c Chicken broth|2 c Spinach leaves cut into piec|1/4 c Grated Pecorino Romano chees&quot;, &quot;servings&quot;: &quot;1 Servings&quot;, &quot;instructions&quot;: &quot;Combine the ground meat, bread crumbs, egg, parsley, salt and pepper in a bowl. Mix well and form into tiny meat balls. Bake on a cookie sheet for 30 minutes at 350F. Meanwhile, bring broth to a boil and add spinach. Cover and boil for 5 minutes. Add the meatballs to the hot broth, bring to a simmer. Stir in the cheese and serve immediately. Rita in Scottsdale 01/02/92 01:41 am&quot; }, { &quot;title&quot;: &quot;Stracciatella (Italian Wedding Soup)&quot;, &quot;ingredients&quot;: &quot;1 lb Fresh spinach, washed and chopped|1 Egg|1 c Parmesan cheese, * see note|Salt, to taste|Pepper, to taste&quot;, &quot;servings&quot;: &quot;6 Servings&quot;, &quot;instructions&quot;: &quot;Bring 1 cup of the broth to a boil. Add spinach and cook until softened but still bright green. Remove spinach with a slotted spoon and set aside. Add remaining broth to pot. Bring to a boil. Meanwhile, beat egg lightly with a fork. Beat in 1/4 cup of cheese. When broth boils pour in egg mixture, stirring constantly for a few seconds until it cooks into &quot;rags. &quot; Add reserved spinach, salt and pepper. Serve immediately, passing remaining cheese.&quot; }, { &quot;title&quot;: &quot;Italian Wedding Soup&quot;, &quot;ingredients&quot;: &quot;2 qt Chicken stock|1 Chopped carrot|1/2 Chopped onion|1 Chopped celery|2 oz Ground meat; (or ground vegieburger can be used)|1 Egg|1 Sprig of chopped parsely&quot;, &quot;servings&quot;: &quot;4 - 6 servin&quot;, &quot;instructions&quot;: &quot;Bring chicken stock to a boil add the chopped carrot,celery and onion and lower heat. Combine ground meat or vegieburger, egg, and parsely, the consistancy of the mixture is kinda loose. Drop in small pieces of the meat mixture, not much larger than a Tablespoon. (making tiny meatballs.) Turn up the heat and bring to a boil,5 -7 minutes, it is ready when the little meatballs float to the surface.&quot; } ] . //user enters &quot;apple pie&quot; const axios = require(&quot;axios&quot;); const options = { method: &#39;GET&#39;, url: &#39;https://recipe-by-api-ninjas.p.rapidapi.com/v1/recipe&#39;, params: {query: &#39;apple pie&#39;}, headers: { &#39;X-RapidAPI-Key&#39;: &#39;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&#39;, &#39;X-RapidAPI-Host&#39;: &#39;recipe-by-api-ninjas.p.rapidapi.com&#39; } }; axios.request(options).then(function (response) { console.log(response.data); }).catch(function (error) { console.error(error); }); . Failed to start the Kernel. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details. .",
            "url": "https://shruthim0.github.io/repository2/2023/02/06/createpreformancetaskdrafts.html",
            "relUrl": "/2023/02/06/createpreformancetaskdrafts.html",
            "date": " • Feb 6, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Preformance Task Outline",
            "content": "Portion of Project I will use for Create Performance task . “Food for Your Mood” Purpose: Allows users to quickly get recipe recommendations depending on their flavor preferences, availability of time, time of day, and more. | . | User inputs: Prep time, flavors, meal type, allergies… Users will select their preferences (multiple) | Outputs: List of 10 recipes with images that meet input criteria. User can opt to get a another 10 recipes. | Frontend: | . . Backend: Will require an API, specifically the “MyCookbook.io” API which will provide recipes with specific cooking time, images of said foods, ingredients, and instructions. | . Video Plan . Will run the program by selecting multiple buttons (time, flavor, type of meal), clicking the “submit” button | Will show the outputs being listed | Will click on recipe expanded link | . . - Food for Your Mood . Enter your food preferences and get a custom recipe list! . &lt;/br&gt; &lt;/br&gt; . Food Preparation Time . . . 10-15 minutes 30-60 minutes 1+ hour 2+ hours No preference &lt;/body&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; . . &lt;/style&gt; . Enter Meal Type . . Breakfast Lunch Dinner Snack &lt;/style&gt; . Enter Flavor Preference . . Sweet Salty Savory &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; Get Recipes . - Food for Your Mood . Enter your food preferences and get a custom recipe list! . &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; t . Food for Your Mood . Next Prev Start Over . &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; RANDOM RECIPE GENERATOR CODE - Food for Your Mood . Indecisive about your next meal? . &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/br&gt; &lt;/head&gt; Generate Recipe &lt;/div&gt; &lt;/html&gt; .",
            "url": "https://shruthim0.github.io/repository2/2023/01/30/preformancetaskplan.html",
            "relUrl": "/2023/01/30/preformancetaskplan.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 5 notes",
            "content": "Unit 5 . 5.1 Beneficial and Harmful Effects . Benefits of our Project . Allows people to develop healthier food habits. | Can help people recovering from eating disorders. | Gives people with food sensitivites or allergies more dietary options. &lt;/br&gt; &lt;/br&gt; | Harms of our Project . Could lead to some overly watching their diet. | Discourages eating from restaurants. If this program was used VERY widely could hurt small food businesses. | Privacy issues when entering personal information into site &lt;/br&gt; | Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . Yes, the dopamine issue is real. Dopamine is the same neurotransmitter that is released in you body when you use drugs. That’s how addiction is created. Your body requires more and more of that stimulant to reach that same level of dopamine from the first time. The same can be said for video games. &lt;/br&gt; &lt;/br&gt; | 5.2 Digital Divide . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . How does someone empower themself in a digital world? By creating contributions that advance the digital aspects of our world. | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? At a school, there are certain restrictions that just must be in place. In this case, the risk, student’s using the internet inappropriately is much higher that the reward of digital empowerment. &lt;/br&gt; | What concerns do you have personally about the digital divide? For yourself or for others. . The digital divide prevalent in our world takes away more opportunities from those who have less access to technology and overall make their lives harder. We can even see this at school, where if you don’t have a smartphone you can’t use the qr codes clubs use for google forms or websites. . 5.3 Computing Bias . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . Mostly the older generation uses Facebook while GenZ uses Tiktok. This is profitable for the individual companies as they are able to market goods to those specific groups. . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I think it’s connected to the idea that women are supposed to be traditionally be the “caretakers” so when a virtual asistant has a female voice it may make people feel like they are being taken care of. Which people may believe that women have a more soothing voice then men. . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple, Netflix, Google) . Netflix uses both user specific data and data from the general population, to keep users hooked on their platform. Like the “__% similar to your taste” category. . HP Computer Video: When not enough diverse data is used to train a program, it results in bias. In the HP video, they probably only used white faces when training their facial recognition program, so the program is unusable to any non-white person. . 5.4 Crowdsourcing . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? . Our project is about providing users with recipes. So, we could have a page where people are able to “like” or vote up/down each recipe. This would get data on the opinions APCS students have about recipes. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Del Norte has diverse individuals with different backgrounds and views. By using DNHS as our population, we can collect diverse data. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . Our project is about providing users with recipes. So, we could have a page where people are able to “like” or vote up/down each recipe. This would get data on the opinions APCSP/APCSA students have about recipes. . 5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . Creative Commons Zero v1.0 Universal waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain | . | Open Source MIT License allows people to use code freely, and making+distributing closed source versions closed source —&gt; so project on GitHub could be private | . | author can say credit needs to be given (could be just adding author’s name at end) | | . | Open Source GPL License allowes people to do ALMOST anything with the code, except distributing closed source versions open source —&gt; GitHub project must be public | . | . | Summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . Software Licenses/Options An author needs to determine a license. | These questions should be asked when determinging which license should be chosen Do I want to waive default copyright in reuse? | Do I want to allow derivative works or not? | Do I want to require all derivative code to be shared? | | . | Digital Rights companies build DRM (Digital Rights Management) software to protect, play, and/or distribute content | . | Ethical Thoughts We need to comply with the terms of licenses and cite sources in our own projects | Many companies try to sites bypass this, but get shut down because of illegalities | . | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . Our team choose to use the ___ license for our frontend (datapirates GitHub repository) and ___ for our backend (dpbackend GitHub repository). We decided on these licenses because . 5.6 . Describe PII you have seen on project in CompSci Principles. . - When you create a public GitHub repository, with you name attached to it . What are your feelings about PII and your personal exposure? . - It&#39;s always best to minimize your ouwn PII. The more personal information out there on the internet about you, the less safe you are. Digital footprints are also very key through life. When you have a job intervew often your digital footprint is examined. ### Describe good and bad passwords? What is another step that is used to assist in authentication. Good passwords have nothing significant about you in them (at least stuff that isn&#39;t obviously significant to you), are longer, have numbers and symbols, and are unique for each site. Bad passwords are the opposite, maybe they are short, only include your name... . Try to describe Symmetric and Asymmetric encryption. . - Symmetric: same key (a secret key) is used for encryption and decryption - Asummetric: different keys (one public key and one private key) is used for decryption than encryption . Provide an example of encryption we used in AWS deployment. . - When you set us a GitHub repository you need to generate a SSH key and GPG key (I think). The SSH is for authentication and the GPG is for signing tags and commits . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . - I know people whose Instagram accounts have been hacked. Their accounts are stolen, somebody poses as them, and posts false information (links that give viruses...). - Lots of phone call ones where they&#39;ll say stuff about a car warranty, or a stolen credit card, or that you won a free cruise, and then they&#39;ll ask for your ssn or credit card number :) .",
            "url": "https://shruthim0.github.io/repository2/2023/01/29/unit5.html",
            "relUrl": "/2023/01/29/unit5.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "CollegeBoard MCQ Test 2",
            "content": "Reviewing Missed Questions . My Answer Correct Answer Explanation . Q10:Directions: For the question or incomplete statement below, two of the suggested answers are correct. For this question, you must select both correct choices to earn credit. No partial credit will be earned if only one correct choice is selected. Select the two that are best in each case.Which of the following Boolean expressions are equivalent to the expression num greater than or equal to 15 Select two answers. | B. (num greater than 15) or (num equals 15) | B &amp; C. Not (num less than 15) | forgot to select 2 options | . Q17:result &lt;-- val1 and NOT val2Which of the following code segments produce the same result as the statement above for all possible values of val1 and val2 ? | A &amp; B | A &amp; D | B doesn&#39;t reqire val1 AND val2 to be true, only OR | . Q21:Which of the following best describes the result of running the program code? | The number 10 is displayed. | Nothing is displayed; the program results in an infinite loop. | i is set to be 1 so everytime it looks, i becomes 1 and never reaches 4. | . Q23:What is displayed as a result of executing the algorithm in the flowchart? | 1 2 3 4 | 5 | The initial value of count is 1, which is less than 5. The variable count is incremented to 2, then 3, then 4, then 5. At this point the condition count &lt; 5 is false, and the algorithm displays the value 5. | . Q27:Which of the following code segments can be used to move the robot to the gray square along the path indicated by the arrows? | | | For the robot to end up on the gray square with the INTENDED PATH the second code segement must be implemented | . Procedure Call ExplanationdrawCircle(xPos, yPos, rad) Draws a circle on a coordinate grid with center (xPos, yPos) and radius rad | C &amp; A | C &amp; BB: x ← 4y ← 1r ← 0REPEAT 3 TIMES{r ← r + 1y ← y + 1drawCircle(x, y, r)} | r cannot be 0, it needs to be 3 in the second segment | . Q49: What problems can be solved with algorithms | Every problem can be solved with an algorithm for all possible inputs, but some of these algorithms have not been discovered yet. | There exist problems that no algorithm will ever be able to solve for all possible inputs. | Not all problems can be solved by a computer. | . Overall Thoughts . Now to improve my CollegeBoard MCQ Test Scores I want to focus on getting better at looking at pseudo code segments and correctly identifying their errors, function, and improvements that can be made. .",
            "url": "https://shruthim0.github.io/repository2/markdown/2023/01/29/cbmcq2.html",
            "relUrl": "/markdown/2023/01/29/cbmcq2.html",
            "date": " • Jan 29, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; def __dir__(self): return [&quot;name&quot;, &quot;uid&quot;] # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . ModuleNotFoundError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb Cell 4 in &lt;cell line: 4&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; # A gateway in necessary as a web server cannot communicate directly with Python. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # In this case, imports are focused on generating hash code to protect passwords. -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from werkzeug.security import generate_password_hash, check_password_hash &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; import json &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Define a User Class/Template &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2023-01-10-PBL-model.ipynb#W3sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; # -- A User represents the data we want to manage ModuleNotFoundError: No module named &#39;werkzeug&#39; . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . hacks ! . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) #class of getter @property def classOf(self): return self._classOf #class of setter @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class_of&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, class_of={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Donald Duck&#39;, uid=&#39;dducky&#39;, password=&#39;yay1234&#39;, dob=date(1900, 5, 13), classOf=&quot;1918&quot;) print(u1) u2 = User(name=&quot;Shruthi Malayath&quot;, uid=&quot;shruthiml12&quot;, password=&quot;ilovegreen&quot;, dob=date(2006,4,12), classOf=&quot;2024&quot;) print(u2) . {&#34;name&#34;: &#34;Donald Duck&#34;, &#34;uid&#34;: &#34;dducky&#34;, &#34;dob&#34;: &#34;05-13-1900&#34;, &#34;age&#34;: 122, &#34;class_of&#34;: &#34;1918&#34;} {&#34;name&#34;: &#34;Shruthi Malayath&#34;, &#34;uid&#34;: &#34;shruthiml12&#34;, &#34;dob&#34;: &#34;04-12-2006&#34;, &#34;age&#34;: 16, &#34;class_of&#34;: &#34;2024&#34;} . hacks2, starting code for project . &lt;! making table for user to input name, email, pswd, phone number... . Name Email Password Phone . | | | | Create | . &lt;/p&gt; . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class Signin: def __init__(self, name, uid, password, phonenum, email): self._name = name # variables with self prefix become part of the object, self._uid = uid self._phonenum = phonenum self.set_password(password) self._email = email #email getter @property def email(self): return self._email #email setter @email.setter def email(self, email): self._email = email #phone number getter @property def phonenum(self): return self._phonenum #phone setter @phonenum.setter def phonenum(self, phonenum): self._phonenum = phonenum @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;phonenum&quot;: self.phonenum, &quot;email&quot;: self.email } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},phonenum={self._phonenum}, class_of={self._email})&#39; u1 = Signin(name=&quot;Shruthi Malayath&quot;, uid=&quot;sm123234&quot;, password=&quot;ilovepurple&quot;, phonenum=&quot;858-982-3241&quot;, email=&quot;myemail@gmail.com&quot;) print(u1) . {&#34;name&#34;: &#34;Shruthi Malayath&#34;, &#34;uid&#34;: &#34;sm123234&#34;, &#34;phonenum&#34;: &#34;858-982-3241&#34;, &#34;email&#34;: &#34;myemail@gmail.com&#34;} . &lt;/div&gt; .",
            "url": "https://shruthim0.github.io/repository2/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Grading College Board Preformance Tasks",
            "content": "Week 17 . Task 1 . Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 0 | 0 | The student met the requirement because in their video they showed entering the input, the program is run, and the output is displayed. In their response, they clearly state the functionality and lists the inputs and outputs of the function. It DOES NOT state the purpose, only the what the function does. | yes | . Data Abstraction | 1 | 1 | Includes code segment with a list and another segment where the code segment is being used. They correctly identify to list name as sideIndex, and describe what their list includes (different triangle classifications). | yes | . Managing Complexity | 0 | 0 | Response is inaccurate when describing the importance of the list. Strings could just be used, if anything the list is unnecessary. | yes | . Procedural Abstraction | 1 | 1 | Meets everything. ratioCalculate is the student-developed procedure, and is called in a second segment with the parameters A,B,C. | yes | . Algorithm Implementation | 1 | 1 | Explains the code segment in detail. | yes | . Testing | 1 | 1 | Describes two calls with different parameters and shows the output of both. | yes | . . Task 2 . Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The student met the requirement because in their video they showed entering the input (with their mouse drawing), the program is run, and the output is displayed (the pixels moving around). In their response, they clearly state the functionality (how their program works, and the purpose (mimic Game of Life) and lists the inputs and outputs of the function. | yes | . Data Abstraction | 1 | 1 | Student shows the data being stored in a list, it being accessed, and is able to identify the list’s name | yes | . Managing Complexity | 1 | 1 | Acurrately explains why the list is necessary and how it manages complexity | yes | . Procedural Abstraction | 1 | 1 | The student has a procedure called replaceList which used two parameters. Accurately describes the program’s functionality. | yes | . Algorithm Implementation | 1 | 1 | The code uses sequencing, an if statement, and a repeat loop. They explain the process in detail. | yes | . Testing | 1 | 1 | Describes two calls with different parameters and shows the output of both. | yes | . . Week 18 . Task 3 . Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 0 | 0 | The student&#39;s program purpose is just the program&#39;s function. They never mention the problem that is being solved. | yes | . Data Abstraction | 0 | 0 | Incorrectly identifies input and output. :( | yes | . Managing Complexity | 0 | 0 | Student doesn&#39;t have code segment where the list is being called on | yes | . Procedural Abstraction | 1 | 0 | Doesn&#39;t describe how their funtion contributes to the overall functionality of their program | No. Though they have a fucntion, they don&#39;t specify how it contributes to their program&#39;s functionality | . Algorithm Implementation | 0 | 0 | Doesn&#39;t describe the code in the detail needed for someone to be able to reacreate it | yes | . Testing | 1 | 1 | Describes two calls with different parameters and shows the output of both. | yes | . . Task 4 . Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs used in the video. | yes | . Data Abstraction | 1 | 1 | Includes segments with list and list being used, correctly names the list and how the data in it is being used. | yes | . Managing Complexity | 1 | 1 | Has a segment with list and correctly explains how the list is neccessary to the program. | yes | . Procedural Abstraction | 1 | 1 | Has two segments with a procedure and that procedure bing called on. Correctly explains what the procedure does and hwo it contributes to the functionality of the program. | yes | . Algorithm Implementation | 1 | 1 | CreatePoems includes sequencing, selection, and iteration. Describes in detail the procedure. | yes | . Testing | 1 | 1 | Describes two calls with different parameters and shows the output of both. | yes | . . Task 5 . Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 0 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs they used. | yes | . Data Abstraction | 1 | 1 | stateList is the list identified. The list is shown and then the other segment shows the list being called on. Student identifes what is being stored in the list correctly./td&gt; yes | &lt;/tr&gt; Managing Complexity | 1 | 1 | findWinner is the student developed procedure which is correctly described and how it contributes to the overall function. | yes | . Procedural Abstraction | 1 | 1 | Has two segments with a procedure and that procedure bing called on. Correctly explains what the procedure does and hwo it contributes to the functionality of the program. | yes | . Algorithm Implementation | 1 | 1 | findWinner, has sequencing, selection and iteration. Student explains in enough detail to recreate. | yes | . Testing | 1 | 1 | Procedure is called twice, wach time with different parameters. Describes both calls. | yes | . &lt;/tbody&gt; &lt;/table&gt; ## **Task 6** Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs they used. | yes | . Data Abstraction | 0 | 0 | Second code segemnt only shows the data&#39;s length being used not the data itself. | yes | . Managing Complexity | 1 | 0 | Includes a list and describes how it manages complexity. *NO, the student does not correctly explain its neccessity as a counter variable could just be used | yes | . Procedural Abstraction | 1 | 1 | Has two segments with a procedure, isitcorrect, and that procedure bing called on. Has two parameters, checkanswer and answer. Correctly explains what the procedure does and hwo it contributes to the functionality of the program. | yes | . Algorithm Implementation | 1 | 1 | isitcorrect, has sequencing, selection and iteration. Student explains in enough detail to recreate. | yes | . Testing | 1 | 0 | Procedure is called twice, wach time with different parameters. Describes both calls. | no. the student only gives the conditions being tested, NOT the arguments being passed through. | . ## **Week 19** ## Task 7 Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs they used. | yes | . Data Abstraction | 0 | 0 | Second code segemnt DOES NOT show the data being accessed frm the list RPS. | yes | . Managing Complexity | 0 | 0 | List DOES NOT manage complexity. An if statement could have just been used. USer doesn&#39;t explain the neccessity of the list correctly. | yes | . Procedural Abstraction | 0 | 0 | Missing: how the procedure contributes to the overall program. Student is too vague. | yes | . Algorithm Implementation | 1 | 1 | Student algorithm, rpsGame has squencing, selection, and iteration. Student explains the algorithm in enough detil to recreate. | yes | . Testing | 1 | 1 | Procedure is called twice, wach time with different parameters. Describes both calls. | yes | . ## **Task 8** Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The student met the requirement because in their video they showed entering the input (with their mouse drawing), the program is run, and the output is displayed (the pixels moving around). In their response, they clearly state the functionality (how their program works, and the purpose (mimic Game of Life) and lists the inputs and outputs of the function. | yes | . Data Abstraction | 1 | 1 | Student shows the data being stored in a list, it being accessed, and is able to identify the list’s name | yes | . Managing Complexity | 1 | 1 | Acurrately explains why the list is necessary and how it manages complexity | yes | . Procedural Abstraction | 1 | 1 | The student has a procedure which used two parameters. Accurately describes the program’s functionality. | yes | . Algorithm Implementation | 1 | 1 | The code uses sequencing, an if statement, and a repeat loop. They explain the process in detail. | yes | . Testing | 1 | 1 | Describes two calls with different parameters and shows the output of both. | yes | . ## **Task 9** Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs they used. | yes | . Data Abstraction | 0 | 0 | Second code segemnt DOES NOT show the data being accessed frm the list. | yes | . Managing Complexity | 0 | 0 | User doesn&#39;t explain the neccessity of the list correctly. | yes | . Procedural Abstraction | 0 | 0 | Missing: parameter. Student is too vaguewhen describing the functionality | yes | . Algorithm Implementation | 0 | 0 | No iteration used in procedure updateScreen | yes | . Testing | 0 | 0 | Does not descirbe calls to teh procedure or have a parameter. Describes the operation being preformed instead of the condition being tested by the parameter | yes | . ## **Task 10** Reporting Category My score CB Score Comments Do they match? . Program Purposeand Function | 1 | 1 | The video includes input, program functionality, and output. The student correctly identifies the program&#39;s purpose, function, and the inputs they used. | yes | . Data Abstraction | 1 | 1 | Two segments that meet the standards, correctly identifies list as fishtypes | yes | . Managing Complexity | 1 | 1 | Code does manage complexity, and explains well why it is needed | yes | . Procedural Abstraction | 1 | 1 | clone+movement+range is a procedure that uses parameters. Decribes in detail the functionality. | yes | . Algorithm Implementation | 1 | 1 | Has sequencing, selection, and iteration. Explains in enough detail to recreate | yes | . Testing | 0 | 0 | Does not descirbe calls to the procedure or have a parameter. Does not decribe the conditions being tested | yes | . | .",
            "url": "https://shruthim0.github.io/repository2/2023/01/08/cbgrading.html",
            "relUrl": "/2023/01/08/cbgrading.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Homework 3.17 - 3.18",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . Problem: a general description of a task that can or cannot be solved algorithmically | Decision Problem: A problem with a yes or no answer | Organization Problem: a problem with a goal of finding the best answer | Instance: a problem with a specific input | Efficiency: amount of computing needed to solve a problem | Polynomial Efficiency (Good): more work takes a proportional amount of time (1 job is +2 time) | Exponential Efficiency (Bad): more work takes an exponential amount more time (1 job is 2x time) | Heuristic Approach: When optimal solutions are inefficient, look for a possibly optimal solution that is more efficient | Decidable Problem: A decision problem that has a clear solution that will always make a correct output | Undecidable Problem: A decision problem with no solution that is not gaurenteed to produce the correct output | . Notes . How quickly and efficiently an algorithm solves a problem is key in determining it&#39;s value | Time complexity: amount of time an algorithm uses to complete a given task | Space complexity: amount of space required by the algo to complete a given task | better time + space complexity --&gt; better algo | the faster a problem can be solved, the better | important to try to make an algorithm as efficient as possible | . import time def betteradd(x,y): z = x + y return(z) starttime = time.time() for i in range(1000000): x = 1 y = 2 z = betteradd(x,y) print(z) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . Challenge . Try and fix this ineficcient code! Only change the code between the two commented lines. Fully programmed solution will improve your grade, at a minimum show that you tried. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #-- exists = False while exists == False: for x in range(len(array)): if value == array[x]: exists = True if exists == False: return exists #-- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 1.1296279430389404 seconds . 3.18 Undecidable Problems . some problems can&#39;t be solved (undecidable) | for these problems, approximations, using heuristics, genetic , and machine learning methods, are made | examples ! Universality of a Nondeterministic Pushdown automaton: determining whether all words are accepted. | The halting problem for a Minsky machine: a finite-state automaton with no inputs and two counters that can be incremented, decremented, and tested for zero | Trakhtenbrot&#39;s theorem - Finite satisfiability is undecidable | The halting problem (determining whether a Turing machine halts on a given input) and the mortality problem (determining whether it halts for every starting configuration). | . | . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernrdo&#39;:50 }, &#39;Westview&#39;:{ &#39;Del Norte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernrdo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;Del Norte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernrdo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;Del Norte&#39;:35, &#39;RanchoBernrdo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;Del Norte&#39;:50 } } . def fastestroute(start,data): time = 0 order = [] school = &quot;&quot; for x in range(len(data)): min = 15000 #setting min to a big number for location, time in data[order[(len(order))]]: if time &lt; min: #if time of location is less than the min set, then make the new min the time of that location school = location min = time dt += min order.append(school) order.append(start) return (dt, order) start = &#39;DelNorte&#39; answer = fastestroute(start, dataset) for x, location in answer[0]: print(str(x + 1) + location) print(&quot;Time:&quot;, answer[0]) . IndexError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb Cell 11 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; return (dt, order) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; start = &#39;DelNorte&#39; &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; answer = fastestroute(start, dataset) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; for x, location in answer[0]: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; print(str(x + 1) + location) /home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb Cell 11 in fastestroute(start, data) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; for x in range(len(data)): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; min = 15000 #setting min to a big number -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; for location, time in data[order[(len(order))]]: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; if time &lt; min: #if time of location is less than the min set, then make the new min the time of that location &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-12-14-117-118-homework.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; school = location IndexError: list index out of range . Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://shruthim0.github.io/repository2/homework1718",
            "relUrl": "/homework1718",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "AP Prep Vocabulary",
            "content": "All Terms . Unit 2… Binary/Data Terms Bits, Bytes, Hexadecimal / Nibbles Binary Numbers: Unsigned Integer, Signed Integer, Floating Point Binary Data Abstractions: Boolean, ASCII, Unicode, RGB Data Compression: Lossy, Lossless (note discussed yet) . Unit 3… Algorithm/Programming Terms Variables, Data Types, Assignment Operators Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class Algorithms, Sequence, Selection, Iteration Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings Python If, Elif, Else conditionals; Nested Selection Statements Python For, While loops with Range, with List Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values (edited) . Unit 2 . bits: the single unit of information in a computer, typically represented as a 0 or 1 | bytes: grouping of 8 bits | hexadecimal/nibbles: numbering system with base 16 | binary numbers unsigted integer: whole numbers) but have the property that they don&#39;t have a + or - sign associated with them. Thus they are always non-negative (zero or positive). | signed integer: A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647] | floating point: arithmetic that represents real numbers approximately, using an integer with a fixed precision, called the significand | . | Binary Data Abstractions Boolean: a value that is either true or false (1 or 0) | ASCII: a character encoding standard for electronic communication; diff symbols stand for different numbers; used 1 byte | Unicode: Unicode is a universal character encoding standard. This standard includes roughly 100000 characters to represent characters of different languages; used 4 bytes | RGB: color model based on red value, green value, and blue value. | . | Data Compression: Lossy: Lossy compression reduces a file by permanently eliminating certain information, especially redundant information. When the file is uncompressed, some of the original information is not there, although the user may not notice it. | Lossless: Every bit of data originally in a file remains after it is uncompressed, and all the information is restored. | . | . Unit 3&#8230; Algorithm/Programming Terms . Variables: A value that can change, depending on conditions or on information passed to the program. A variable can be assigned to a certain integer, float, string... | Data Types: a classification that specifies which type of value a variable has and what type of mathematical, relational or logical operations can be applied to it without causing an error. | Assignment Operators: sets and/or re-sets the value stored in the storage location(s) denoted by a variable name; in other words, it copies a value into the variable | Managing Complexity with Variables Lists: an abstract data type that represents a finite number of ordered values, where the same value may occur more than once. | 2D Lists: 2D array is a collection of data cells, all of the same type, which can be given a single name | Dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | Class: static variable that can be declared anywhere at class level with static | . | Algorithms: a small procedure that solves a recurrent problem | Sequence: the order in which statements are executed | Selection: a programming construct where a section of code is run only if a condition is met | Iteration: when the same procedure is repeated multiple times. | Expressions: a combination of values and functions that are combined and interpreted by the compiler to create a new value, as opposed to a “statement” which is just a standalone unit of execution and doesn&#39;t return anything | Comparison Operators: &gt;, &lt;=, &lt;, =&gt;, ==... operators that compare | Truth Tables: A truth table is a way of summarising and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. | Characters: a display unit of information equivalent to one alphabetic letter or symbo (char) | Strings: A string is generally considered a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. | Length: of a string | Concatenation: combining 2 strings | Traversing Strings: accessing all the elements of the string one after the other by using the subscript | Python If: a statement with an if condition | Elif: else if statement, - if x is true then _, else do __ | Else conditionals: a statement with an else condition-- if x else | Nested Selection Statements: selection statements that are nested within themselves (see example) | Python For While loops with Range: a for/while loop that uses the range() function | Python for/while loop with with List: a while/for loop that iterates through a list and applies a certain algo to items in list | Combining loops with conditionals to Break: For certain conditions, the loop will terminate exectution | Python Def procedures (see code block 1) | Parameters: values that are passed through a function | Return Values: a value that a function returns to the calling script or function when it completes its task | . anumberyay = 25 stringvariable = &quot;i am so sleepy&quot; numberlist = [1, 2, 3, 4, 5] listofstrings = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;] iamnotstressed = False print(anumberyay) print(stringvariable) print(numberlist) print(listofstrings) print(iamnotstressed) . 25 i am so sleepy [1, 2, 3, 4, 5] [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;] False . // boolean in javascript Boolean(w &gt; q) //true Boolean(w &lt; q) //false . # list # sequence: code is run line by line: first remainder of x is found, then statement is printed # paramenters: the values in the list numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for x in numlist: if int(x) % 3 == 0: print(str(x) + &quot; is divisible by 3 :) &quot;) continue else: print(str(x) + &quot; is not divisible by 3 :(&quot;) continue . 3 is divisible by 3 :) 4 is not divisible by 3 :( 9 is divisible by 3 :) 76 is not divisible by 3 :( 891 is divisible by 3 :) . # list: square brackets list = [] list.append(&quot;flowers&quot;) list.append(&quot;fruits&quot;) # appending a value to a defined list print(list) . [&#39;flowers&#39;, &#39;fruits&#39;] . mydictionary = {&quot;dogies&quot;:&quot;animals&quot;} # defining dictionary using curly brackets mydictionary[&quot;banana&quot;] = &quot;fruit&quot; #add keys and values to a dict by setting a value equal to a key, like shown mydictionary[&quot;couch&quot;] = &quot;furniture&quot; #editing a value inside the dictionary print(mydictionary) . {&#39;dogies&#39;: &#39;animals&#39;, &#39;banana&#39;: &#39;fruit&#39;, &#39;couch&#39;: &#39;furniture&#39;} . value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . number = 5 #defining the variable number x = number * 2 #defining a variable by using another variable print(number*2) # multiplying a variable by 2 print(x) . 10 10 . #substring = string[start:end] #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string (string) = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:8]) len(string) . hello bye hellobye . 8 . string1 = &quot;butter&quot; string2 = &quot;fly&quot; string3 = string1 + string2 print(string3) . butterfly . names = [&quot;cat&quot;,&quot;dog&quot;,&quot;racoon&quot;,&quot;rabbit&quot;] def length(names): for x in names: print(x, len(str(x))) length(names) . cat 3 dog 3 racoon 6 rabbit 6 . decimal = int(input(&quot;Enter the number you would like to convert into binary&quot;)) #get input from user &amp; set variables binary = 0 i = 0 #set initial num = decimal while(num &gt; 0): binary = ((num%2)*(10**i)) + binary # set binary equal to remainder of the input/2, multiplied by 10^i num = int(num/2) #now number equal num/2 rounded to an integer i += 1 #incriment by 1 #output result print(&quot;Your number &quot; + str(decimal) + &quot; in binary is &quot; + str(binary)) . Your number 2123 in binary is 100001001011 . feeling = int(input(&quot;On a scale of 1-10, how do you feel today (10=amazing, 1= terrible)?&quot;)) def response(feeling): if feeling &gt; 8: print(&quot;Yay! I&#39;m glad you feel that way :)&quot;) if feeling == 10: print(&quot;I am so happy for you!&quot;) else: if feeling &lt; 4: print(&quot;Oh no, I hope you feel better soon! You are doing amazing!&quot;) else: print(&quot;You got this, you are doing so well!&quot;) response(feeling) . Oh no, I hope you feel better soon! You are doing amazing! .",
            "url": "https://shruthim0.github.io/repository2/2022/12/06/cbpresentationvocab.html",
            "relUrl": "/2022/12/06/cbpresentationvocab.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 14-15 Homework",
            "content": "Create a program that asks the user for a day and then gives them a distance in days between that day and another random day in the year. We have provided you with a possible starter, but you are welcome to change it up if you would like. . from datetime import date import random days_dictionary = { 1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31, } # expected output shown below (or something similar) . Input a day 13 Input a month 7 Input a year 2010 user day: 07/13/2010 random day: 09/11/2010 The number of days between the given range of dates is: 60 .",
            "url": "https://shruthim0.github.io/repository2/week-13/big-idea-3/2022/12/03/libraries-hw.html",
            "relUrl": "/week-13/big-idea-3/2022/12/03/libraries-hw.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "3.14 and 3.15",
            "content": "ADD YOUR ADDITIONAL NOTES HERE: . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring | Each Result from randomization is equally likely to occur Using random number generation in a program means each execution may produce a different result | Each Result from randomization is equally likely to occur | Using random number generation in a program means each execution may produce a different result | . Random values can be used in coding: . import random random_number = random.randint(1,100) print(random_number) . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . Real Life Examples: Dice Roll . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot; + str(roll)) . Challenge #1 . Write a function that will a simulate a coinflip and print the output . import random def coinflip(): #def function randomflip = random.randint(0, 1) #picks either 0 or 1 randomly (50/50 chance of either) if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . random binary to dec converter . import random decimal = random.randint(1,255) binary = 0 i = 0 #set initial num = decimal while(num &gt; 0): binary = ((num%2)*(10**i)) + binary # set binary equal to remainder of the input/2, multiplied by 10^i num = int(num/2) #now number equal num/2 rounded to an integer i += 1 #incriment by 1 #output result print(&quot;Your number &quot; + str(decimal) + &quot; in binary is &quot; + str(binary)) . Your number 204 in binary is 11001100 . 3.14 . fill in the blanks! . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most package come with documentation on the different methods they entail and how to use them, and they can be found with a quick google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some methods are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called import. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &quot;from&quot;, followed by the package name, then the word &quot;import&quot;, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &quot;*&quot;. . To import a method as an easier name, just do what we did first, add the word &quot;as&quot;, and write the name you would like to use that package as. . Challenge 1: Basic Libraries . Find a python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | import math as m from math import * from math import sqrt . Challenge 2: Turtle . Turtle is a python drawing package which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a graphics package to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with vscode. Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Use: repl.it Click &quot;+ Create&quot;, and for language, select &quot;Python (with Turtle)&quot; Documentation Task: Have fun with turtle! Create something that uses at least 2 lines of different lengths and 2 turns with different angles, and changes at least one setting about either the pen or canvas. Also use one command that isn&#39;t mentioned on the table below(there are a lot). Paste a screenshot of the code and the drawing from repl.it . Commands . forward(pixels) | . right(degrees) | . left(degrees) | . setpos(x,y) | . speed(speed) | . pensize(size) | . pencolor(color) | . Note: Color should be within quotes, like &quot;brown&quot;, or &quot;red&quot; . from turtle import * oogway = Turtle() . Challenge 3: Math . The math package allows for some really cool mathematical methods! . methods Action . ceil(x) | returns the next higher integer (10--&gt;10, 10.1&gt;11, 10.9&gt;11 | . f | rounds to largest intefer less than or equal to x | . factorial(x) | returns factorial | . gcd(x,y) | returns the greatest common denominator of x and y | . lcm(x,y) | returns greatest least common multipe of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! Documentation | . from math import * x = float(input(&quot;Enter your first number&quot;)) y = float(input(&quot;Enter your second number&quot;)) def challenge(x,y): rux = ceil(x) ruy= ceil(y) rdx = round(x) rdy = round(y) signswitch = copysign(x, y) gcommond = gcd(rux,ruy) facx = factorial(x) facy = factorial(y) remainder = fmod(x,y) print(&quot;rounded up: &quot;+ str(rux) + &quot; &quot; + str(ruy)) print(&quot;rounded down: &quot;+ str(rdx) + &quot; &quot; + str(rdy)) print(&quot;signs switched: &quot;+ str(signswitch)) print(&quot;greatest common factor of rounded #s: &quot;+ str(gcommond)) print(&quot;factorials: &quot;+ str(facx) + &quot; &quot; + str(facy)) print(&quot;remainder of x/y: &quot; + str(remainder)) challenge(x,y) . rounded up: 2 4 rounded down: 2 4 signs switched: 2.0 greatest common factor of rounded #s: 2 factorials: 2 24 remainder of x/y: 2.0 . lcm is only in python 9 so I did signswitch() instead (it returns a float with the absolute value of x but the sign of y) . from datetime import * from random import * def numberofdaysbetween(): d1 = datetime.date(2023, 1, 1) d2 = datetime.date(2022, 12, 14) diff = d1 - d1 print(&quot;The number of days between&quot; + str(d1) + &quot; and &quot; + str(d2) + &quot; is &quot; + diff) numberofdaysbetween() .",
            "url": "https://shruthim0.github.io/repository2/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "relUrl": "/week-13/big-idea-3/2022/12/01/StudentCopyRandomValues.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . Decimal to Binary Converter Using division by 2 . num = int(input(&quot;Enter the number you would like to convert into binary&quot;)) def DecimalToBinary(num): if num &gt; 1: DecimalToBinary(num // 2) #divide input by 2 print(num % 2, end = &quot;&quot;) #so that numbers prints all together instead of new line for each number print(&quot;Your number, &quot; + str(num) + &quot;, in binary is:&quot;) DecimalToBinary(num) . Your number, 1231, in binary is: 0011001111 . Decimal to Binary Converter Using a While loop (Extra) . decimal = int(input(&quot;Enter the number you would like to convert into binary&quot;)) #get input from user &amp; set variables binary = 0 i = 0 #set initial num = decimal while(num &gt; 0): binary = ((num%2)*(10**i)) + binary # set binary equal to remainder of the input/2, multiplied by 10^i num = int(num/2) #now number equal num/2 rounded to an integer i += 1 #incriment by 1 #output result print(&quot;Your number &quot; + str(decimal) + &quot; in binary is &quot; + str(binary)) . Your number 131 in binary is 10000011 . print(&quot;True:&quot;,4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;,5 &lt; 6) print(&quot;False:&quot;,7 &gt; 8) print(&quot;True:&quot;,3 == 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False&quot;,True == False) print(&quot;False:&quot;,[2,3,1] &lt; [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt; [1,&#39;a&#39;]) print(&#39;&#39;) . True: True True: True False: False True: True False: False True: True True: True False False False: False True: True False: False True: True . print(&quot;True:&quot;, True &gt; False) print(&quot;False:&quot;, True &gt; True) print(&quot;True:&quot;, True == True) print(&quot;False:&quot;, False == True) print(&quot;False:&quot;, True == False) print(&quot;True:&quot;, False == False) . True: True False: False True: True False: False False: False True: True . print(3,3,4,6,5,7) . 3 3 4 6 5 7 . def function(x, y, z): if x &gt; y: if z &gt; x: print(&quot;z is greater than everything else&quot;) else: print(&quot;x is greater than y and z&quot;) else: if y &gt; x: print(&quot;y is greater than x!!!&quot;) else: print(&quot;i have no idea :(&quot;) function(7, 12, 3) . y is greater than x!!! . Notes . Boolean Operators . Relational Operators can work between any two values of the same type known as operands, provided that the type supports such types of operators | operators ==, !=, &gt;, &lt;, &gt;=, &lt;=, each one working the same way that they work as one would expect, with == being the replacement for equal to, since = is reserved for value assignments. | They also work on other types, such as string or list, and values at each index is compared in order to determine which one is greater | for example: &quot;abg&quot;&lt;&quot;acd&quot; returns True, since the computer first goes to a and a, after they are the same, they go to b and c, and since c is &quot;greater&quot; than b, &quot;acd&quot; is greater than &quot;abg&quot; | . | Vocab . algorithm - A set of instructions that accomplish a task. | selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. | . | Conditional . A conditional is a statement that affects the flow/outcome of a program by executing different statements based on the result of a true or false statement. That true or false statement is a boolean expression. | . | If/el . can be if else, can also be just if | . | Nested conditionals . Nested Conditional Statements consist of conditional statements within conditional statements. | . | .",
            "url": "https://shruthim0.github.io/repository2/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the next power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the next, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . first try: . I redid this because this code was very long and I felt there was a way to simplify it . x=int(input(&quot;Enter the number you want to find square root approximation of: &quot;)) def sqa(x): th = 0.4 e = 1.0 srL = 0.0 srH = x e1 = x - srL*srL e2 = x - srH*srH if e1 == 0: e =e1 srH = int(srH) print(&quot;Square root of &quot; + x + &quot; is &quot; + str(srL)) elif e2 == 0: e=e2 srH = int(srH) print(&quot;Squre root of &quot; + x + &quot; is &quot; + str(srH)) while abs(e) &gt; th: srM = (srL+srH)/2 e = x - srM*srM if abs(e) &lt; th: srM = int(srM) print(&quot;Square root of &quot; + x + &quot; is &quot; + str(srM)) else: if (e&lt;0): srH = srM else: srL = srM sqa(x) . def sq(x): x=int(input()) a=0 b=x for i in range(10): middle=(a+b)/2 #find the middel number between 0 and x c = middle*middle #square middle value if c==x: #if middle=sqrt ends here break elif c&gt;x: #if middle value squared&gt;x then the new interval will be from 0 to max value b=middle else: #ifmiddle value squared&lt;x then new interval will be from middle to x a=middle print(&quot;Square root of, &quot; + str(x) + &quot; is around &quot; + str(int(middle))) sq(x) . Square root of, 1234 is around 34 . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sq(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed . All Extra Notes . Algorithms can be written in different ways and still accomplish the same tasks. | Algorithms that look similar often yield differnet outputs. | To solve the same problem, many different algorithms can be used. | Conditionals and booleans can be equivalent | Binary search is an efficient way to iterate through a sorted list to find a requested value checking the middle value of a list and checking if the requested value is greater than or less than the middle value. | saves time | . | .",
            "url": "https://shruthim0.github.io/repository2/2022/11/29/searching-introduction.html",
            "relUrl": "/2022/11/29/searching-introduction.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 . function iptobinary(ip, subnet) { var ip = prompt(&quot;Enter your IP adress:&quot;); var subnet = prompt(&quot;Enter your subnet mask:&quot;); } .",
            "url": "https://shruthim0.github.io/repository2/2022/11/29/developing-algorithms-js.html",
            "relUrl": "/2022/11/29/developing-algorithms-js.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Developing Algorithms",
            "content": "Algorithms can be written in different ways and still accomplish the same tasks. Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. . Therefore, algorithms are very important for programmers, and today we&#39;re going to explore how to determine the outcome of algorithms, how to deteremine the output of similar algorithms, how to edit existing algorithms, and how to develop our own algorithms. . Determine the outcome of algorithms . Consider the following algorithm. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . What does the algorithm do? Please explain in words. Defines two variables, num and num2. Then num is divided by num2, and if the remainder of that division equals 0, then it prints true, other wise false. | What if I put in 30 as num and 4 as num2. What would be the output? false- 30 is not divisible by 4 | Determine the outcome of similar algorithms . What is the output of this algorithm? . Only &quot;it is too hot outside&quot; will be printed . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . What is the output of this algorithm? it looks similar but the output is different! . THis will print both &quot;it is too hot outside&quot; and &quot;i will go outside&quot; . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . it is too hot outside . Editing Algorithms . Task: Please edit the algorithm above to have it yield the same results as the previous algorithm! (no matter what temp you put in) . Developing Algorithms . To develop algorithms, we first need to understand what the question is asking. Then, think about how you would approach it as a human and then try to find what pattern you went through to arrive at the answer. Apply this to code, and there you have it! An algorithm! . Let&#39;s say you wanted to sum up the first five integers. How would you do this in real life? Your thought process would probably be: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . Now let&#39;s translate this into code. . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . Task: Write an algorithm in python that sums up the first 5 odd integers. You can use the following code as a starter. . sum = 0 counter = 1 for i in range (0, 10): if i % 2 != 1: sum = sum + i counter = counter + 2 print(sum) . 20 . Homework . Create an algorithm that will start with any positive integer n and display the full sequence of numbers that result from the Collatz Conjecture. The Collatz Conjecture is as follows: . start with any positive integer | if the number is even, divide by 2 | if the number is odd, multiply by 3 and add 1 | repeat steps 2 and 3 until you reach 1 | Example: if the starting number was 6, the output would be 6, 3, 10, 5, 16, 8, 4, 2, 1 . x = int(input(&quot;Enter any integer!&quot;)) while x != 1: if x % 2 == 0: x = int(x / 2) else: x = (x*3) + 1 print(x) . 12 6 3 10 5 16 8 4 2 1 .",
            "url": "https://shruthim0.github.io/repository2/2022/11/29/Developing-Algorithms.html",
            "relUrl": "/2022/11/29/Developing-Algorithms.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "HW",
            "content": "data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value for x in range(len(data)): if data[x] &lt; min_valid: print(x,data[x]) if data[x] &gt; max_valid: print(x,data[x]) . 2 4 4 308 6 5 9 306 . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] print(&quot;Here are the albums n 1. Welcome to my Nightmare n 2. Bad Company n 3. Nightflight n 4. More Mayhem&quot;) album = int(input(&quot;Choose an album enter its corresponding number&quot;)) song = int(input(&quot;Choose a song from your chosen album&quot;)) print(&quot;Playing&quot; , albums[album - 1][3][song - 1]) . Here are the albums 1. Welcome to my Nightmare 2. Bad Company 3. Nightflight 4. More Mayhem Playing Ready for Love .",
            "url": "https://shruthim0.github.io/repository2/2022/11/28/hw.html",
            "relUrl": "/2022/11/28/hw.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "3.3-3.4 notes",
            "content": "Intro . Represent a value with a variable | Strings, lists, booleans, numbers | Determine the value of a variable as a result of an assignment | . Defining in Pythin . To define a variable in python, just type in the variable name - one word - and use the = sign to set it equal to it&#39;s value. | variable can be defined using numbers, string, list, or boolean | Strings must have quotations around it | lists must be surrounded by square brackets | . boolean: T or F . - define dictionary w curly brackets - create a new key and set it equal to a value - can use floats ( a decimal) - can do division, multiplication, print them . Javascript . - var name = value; - can use algebra - var x = x + y - const also defines a variable . Boolean . - w = 6 and q = 5 - if w&gt;6 boolean returns ture . Data Abstraction in Python . Manages complexity in a program and makes code easier to implement | differnt variables can hvae the same object | can split and join lists and the data inside them | . numbervariable = 25 stringvariable = &quot;i am so sleepy&quot; numberlist = [1, 2, 3, 4, 5] listofstrings = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;] israining = False print(numbervariable) print(stringvariable) print(numberlist) print(listofstrings) print(israining) . 25 i am so sleepy [1, 2, 3, 4, 5] [&#39;red&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;] False . number = 5 #defining the variable number x = number * 2 #defining a variable by using another variable print(number*2) # multiplying a variable by 2 print(x) . 10 10 . list = [] list.append(&quot;flowers&quot;) list.append(&quot;fruits&quot;) # appending a value to a defined list print(list) . [&#39;flowers&#39;, &#39;fruits&#39;] . mydictionary = {&quot;dogies&quot;:&quot;animals&quot;} # defining dictionary using curly brackets mydictionary[&quot;banana&quot;] = &quot;fruit&quot; #add keys and values to a dict by setting a value equal to a key, like shown mydictionary[&quot;couch&quot;] = &quot;furniture&quot; #editing a value inside the dictionary print(mydictionary) . {&#39;dogies&#39;: &#39;animals&#39;, &#39;banana&#39;: &#39;fruit&#39;, &#39;couch&#39;: &#39;furniture&#39;} . // boolean in javascript Boolean(w &gt; q) //true Boolean(w &lt; q) //false .",
            "url": "https://shruthim0.github.io/repository2/2022/11/28/Unit3.3-3.4notes.html",
            "relUrl": "/2022/11/28/Unit3.3-3.4notes.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "3.1-3.2 notes",
            "content": "3.3 Expressions . Vocabulary :) . the symbol for exponent is ** | the symbol for addition is + | the symbol for subtraction is - | the symbol for multiplication is * | the symbol for division is / | the symbol for modulus is % | this gets you remainder | . an algorithm is sequence of steps that do a specific task | practicing sequencing . value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . selection &amp; iteration practice . numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for x in numlist: if int(x) % 3 == 0: print(str(x) + &quot; is divisible by 3 :) &quot;) continue else: print(str(x) + &quot; is not divisible by 3 :(&quot;) continue . 3 is divisible by 3 :) 4 is not divisible by 3 :( 9 is divisible by 3 :) 76 is not divisible by 3 :( 891 is divisible by 3 :) . incorporating binary . def convert(number): binary = &quot;&quot; i = 7 while i &gt;= 0: if number % (2**i) == number: binary = binary + &quot;0&quot; i -= 1 else: binary = binary + &quot;1&quot; number -= 2**i i -= 1 print(binary) print(&quot;Here is your number in binary!&quot;) convert(47) . Here is your number in binary! 00101111 . Psuedocode . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can be thought of with ordinary things you do: Brushing your teeth: . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice . substring is a part of a string | #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string (string) = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:8]) len(string) . hello bye hellobye . 8 . Concatenation Practice . concatenation is the combining of strings | string1 = &quot;butter&quot; string2 = &quot;fly&quot; string3 = string1 + string2 print(string3) . butterfly . names = [&quot;cat&quot;,&quot;dog&quot;,&quot;racoon&quot;,&quot;rabbit&quot;] def length(names): for x in names: print(x, len(str(x))) length(names) . cat 3 dog 3 racoon 6 rabbit 6 .",
            "url": "https://shruthim0.github.io/repository2/2022/11/27/Unit3.1-3.2notes.html",
            "relUrl": "/2022/11/27/Unit3.1-3.2notes.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of a List and length of aList is increased by 1 | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 and 3.10 . lists are collections of data | indexes: position . most languages start at zero (but cb starts at 1) | used when calling a certain value from a list | . | operations that can be done on lists . append values | assign a value from a list to a variable | insert a value at a specific index in the list | remove values from lists | . | loops! . for loops: useful for applying a function to everything in a list one-by-one for x in mylist: | . | recursive loops: good when you want to limit the starting point | while loops: don&#39;t require a function that is then called again within the original function until a condition is met. perform all the way through while i&gt; 0: | . | . | . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . print(&quot;For this quiz on lists and iteration, please answer using lowercase letters&quot;) def questionandanswer(prompt, answer): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken if msg == answer: print(msg + &quot; good job!&quot;) else: print(&quot;wrong :(&quot;) qa = { &quot;What is a list? n a) a collection of data n b) an iterating function n c) a type of loop&quot; : &quot;a&quot;, &quot;______ adds data to a list and using the _____ you can accesses specific data n a) a add and remove n b) append and index n c) insert and select&quot;: &quot;b&quot;, &quot;The three types of loops are: n a) for, recursive, while n b) recursive, while, on event n c) while, after, for&quot; : &quot;b&quot;, &quot;Dictionarys use ___ brackets in python n a) square n b) curly n c) parenthetical&quot; : &quot;a&quot;, &quot;For loops are good when you want to: n a) control number of iterations n b) use strings instead of integers n c) apply the same function to an entire list&quot; : &quot;c&quot;, } correct = 0 for item in qa: num = questionandanswer(item, qa[item]) . For this quiz on lists and iteration, please answer using lowercase letters Question: What is a list? a) a collection of data b) an iterating function c) a type of loop a good job! Question: ______ adds data to a list and using the _____ you can accesses specific data a) a add and remove b) append and index c) insert and select b good job! Question: The three types of loops are: a) for, recursive, while b) recursive, while, on event c) while, after, for wrong :( Question: Dictionarys use ___ brackets in python a) square b) curly c) parenthetical a good job! Question: For loops are good when you want to: a) control number of iterations b) use strings instead of integers c) apply the same function to an entire list d good job! . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list grocery_list[3] # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot; and &quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(2, &quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list.insert(2, &quot;artichokes&quot;) # Print the entire list, does it match ours ? grocery_list # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . carrots . [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [&quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot;] decimal_list = [] for x in binarylist: decimal = int(x,2) decimal_list.append(decimal) max_valid = 100 # set max value for x in range(len(decimal_list)): # for each thing in decimal list if decimal_list[x] &lt; max_valid: # if value is smaller than the max print(decimal_list[x]) # print it! . 73 55 .",
            "url": "https://shruthim0.github.io/repository2/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Testing Python",
            "content": "print(&quot;hello world&quot;) . hello world .",
            "url": "https://shruthim0.github.io/repository2/2022/11/18/testingkernals.html",
            "relUrl": "/2022/11/18/testingkernals.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Testing Javascript",
            "content": "const message = &quot;testing&quot; console.log(message) . testing .",
            "url": "https://shruthim0.github.io/repository2/2022/11/18/testingjava.html",
            "relUrl": "/2022/11/18/testingjava.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Big idea 3!",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is sequence of steps that do a specific task . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for x in numlist: if int(x) % 3 == 0: print(str(x) + &quot; is divisible by 3 :) &quot;) continue else: print(str(x) + &quot; is not divisible by 3 :(&quot;) continue . 3 is divisible by 3 :) 4 is not divisible by 3 :( 9 is divisible by 3 :) 76 is not divisible by 3 :( 891 is divisible by 3 :) . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(number): binary = &quot;&quot; while int(number) &gt; 0: binary += str(int(n%2)) number = number / 2 number = int(input(&#39;Enter a number that is between 1-255&#39;)) convert(number) print(&quot;Here is your number in binary:&quot;) convert(123) . Here is your number in binary: . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is combining two strings Length is the length of a string A substring is part of a string . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string (string) = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:8]) len(string) . hello bye hellobye . 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for x in names: print(x, len(str(x))) length(names) . jaden 5 max 3 dylan 5 orlando 7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://shruthim0.github.io/repository2/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/expressions-and-strings.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Testing Bash",
            "content": "echo helloo! . helloo! .",
            "url": "https://shruthim0.github.io/repository2/2022/11/17/testingbash.html",
            "relUrl": "/2022/11/17/testingbash.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Binary Conversion (8 bit)",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal ASCII Minus . +1 | 00000000 | 0 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | .",
            "url": "https://shruthim0.github.io/repository2/2022/11/17/binary8bit.html",
            "relUrl": "/2022/11/17/binary8bit.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Night at the Museum",
            "content": "Different CS Projects I Saw . A group used a Spotify API to create a Taylor Swift album encyclopedia. You could click on her different albumns and all the song in that albumn would appear, in order. Their fastpages was very easy to navigate and very organized. . | A group created a project where the user can input their symptoms and then possible sicknesses the user has will be outputted. I thought this project was such an interesting idea and is a very useful program for a broad audience. . | A group created a wordle game. They attempted to make it so you could play the game with English words and with Spanish words. They used an API to pull random 5 letter Spanish words, and made a dictionary themselves with 5-letter English words. I thought it was very cool that they branched out from English, broadening the audience of their program. . | Our Project . We encountered a lot of issues with our API on the day of our presentation. But, in the following week, we were able to implement our API into our project. Next time, I hope to more fully understand the requirements of our preformance task. .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/11/09/nightatmuseumpost.html",
            "relUrl": "/markdown/2022/11/09/nightatmuseumpost.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Tri 1 Final Exam Review",
            "content": "Incorrect Questions + explanation . Overall Thoughts + Comments: In general I need to pay more attention while reading the question and identifying what the problem is asking me to find. For most of these questions, I solved for the wrong output/variable/etc. because I skimmed over the question instructions. Overall pay more attension while reading the question and make sure you’re actually answering the question. . 2. . my answer: It displays true if x is negative and displays false otherwise. | correct answer: It displays true if x is negative and displays nothing otherwise. | Explanation: When x is negative, y is assigned the value true and the value of y is displayed. When x is not negative, y is assigned the value false and the display statement is never executed. It WONT display false, just nothing will be displayed. | . 15. . my answer: Users can identify and correct errors they encounter when using released versions of the software. | correct answer: Users can provide feedback that can be used to incorporate a variety of perspectives into the software. | Explanation: Users can provide feedback that can help inform program design and development. Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives and to develop a program that fully incorporates these perspectives. I accidentally choose the wrong option. | . 16. . my answer: The message is broken into packets that are transmitted in a specified order. Each packet must be received in the order it was sent for the message to be correctly reassembled by the recipient’s device. | correct answer: | Explanation: Messages are broken into packets, BUT they can be received in any order and still be reassembled. | . 24. . my answer: Decimal 5, binary 1011, binary 1101, decimal 12 | correct answer: Decimal 5, binary 1011, decimal 12, binary 1101 | Explanation: Binary 1011 is equivalent to 23+21+20, or decimal 11, and binary 1101 is equivalent to 23+22+20, or decimal 13. The order of the numbers (written in their equivalent decimal format) is 5, 11, 12, 13. | . 27. . my answer: A string variable named s and a Boolean variable named a | correct answer: A string variable named studentName and a Boolean variable named isAbsent | Explanation: While a string variable and a Boolean variable are appropriate for this situation, the variable names s and a are not meaningful and will make the code segment harder for someone to read. | . 28. . my answer: B | correct answer: C | Explanation: If the number of units of electricity used is 25 or less, the cost is 5 times the number of units. Otherwise, the cost is 5 times the first 25 units plus 7 times the number of units above 25. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. THE FIRST 25 U ARE STILL CHARGED AS 5 PER U. | . 32. . my answer: [10, 30, 50, 70, 20, 40, 60, 80] | correct answer: [10, 30, 50, 70] | Explanation: List is not appended, a copy of myList is assigned to yourList. | . 35. . my answer: B &amp; D | correct answer: A &amp; D | Explanation:The last line in the code segment of B sets maxPS to 50 regardless of the value of time, which is incorrect. | . 37. . my answer: B | correct answer: D | Explanation: B assigns both variable as num1 | . 38. . my answer: A. temp ← word1 | . word3 ← word1 . word1 ← temp . correct answer: | . B. temp ← word1 . word1 ← word3 . word3 ← temp . Explanation: A makes xylophone both word1 and word3, which is incorrect. | . 41. . my answer: 30 | correct answer: 20 | Explanation: q and s are 30 after the coe is executed, but r is 20. R is assigned the value of p and p is 20. | . 42. . my answer: 18 | correct answer: 16 | Explanation: After initially assigning values to the variables, the code segment assigns the value 4 to num3 and assigns the value 8 to num1. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. | . 43. . my answer: 10 | correct answer: 15 | Explanation: 10 would be if it was looped 4 times, not 5. | . 44. . my answer: 2 | correct answer: 3 | Explanation: The remainder when 23 is divided by 3 is 2, so 23 MOD 3 is 2. Question is asking what what y should be set to. | . 46. . my answer: The value of first is false, and the value of second is false. | correct answer: The value of first is true, and the value of second is true. | Explanation: The eighth statement assigns the value of c + d / 2 (which is 50) to d. | . 47. . my answer: | correct answer: Assigned d incorrectly.The eighth statement assigns the value of c + d / 2 (which is 50) to d. | . 48. . my answer: The value of first is false, and the value of second is false. | correct answer:The value of first is true, and the value of second is true. | Explanation: Incorrect. The third statement assigns the value of first (which is true) to second. The fourth statement assigns the value of second (which is true) to first. | . 49. . my answer: word ← “no” | . word ← concat(reverse(word), reverse(word)) . correct answer: word ← “on” | . word ← concat(reverse(word), word) . Explanation: The string produced is “on” not “no” | .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/11/09/finalcbexam.html",
            "relUrl": "/markdown/2022/11/09/finalcbexam.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "1.1-1.3 AP Prep",
            "content": ". . . Reflection . Collaboration Quiz: was straightforward | Program Design and Development Quiz: Also pretty easy to understand. At times took some extra time to completetly understand the purpose of the code segments. | Program Function and Purpose Quiz: Struggle with this one more. Loop code segments were the most difficult for me. |",
            "url": "https://shruthim0.github.io/repository2/2022/10/25/cb1.1-1.3.html",
            "relUrl": "/2022/10/25/cb1.1-1.3.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Javascript Web Page using an API",
            "content": "The code below holds the info that is being generated into an HTML table. . Key things to know: . &lt; table &gt; creates a TABLE | &lt; tr &gt; creates a ROW | &lt; th &gt; makes the text a column HEADER | &lt; tbody id = &quot;results&quot; &gt; defines an element id, to be used within JavaScript | . &lt;!-- HTML table fragment for page --&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Joke&lt;/th&gt; &lt;th&gt;HaHa&lt;/th&gt; &lt;th&gt;Boohoo&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;result&quot;&gt; &lt;!-- javascript generated data --&gt; &lt;/tbody&gt; &lt;/table&gt; . Constant variables are declared here with keyword const . Key things to know: . The document object &quot;result&quot; represents table body in the HTML above. | If you want to access any element in an HTML page in JavaScript, you always start by accessing the document object. In this case, we are accessing &quot;result&quot; and defining a &quot;resultContainer&quot; | In the code, in following cells, document elements are created and organized for each Joke, each is added to the &quot;resultContainer&quot; as a row in the table body. | Accessing the api is done using the variables url and options, this is setup to fetch the Jokes from the backend | . // prepare HTML defined &quot;result&quot; container for new output const resultContainer = document.getElementById(&quot;result&quot;); // keys for joke reactions const HAHA = &quot;haha&quot;; const BOOHOO = &quot;boohoo&quot;; // prepare fetch urls const url = &quot;https://flask.nighthawkcodingsociety.com/api/jokes&quot;; const like_url = url + &quot;/like/&quot;; // haha reaction const jeer_url = url + &quot;/jeer/&quot;; // boohoo reaction // prepare fetch GET options const options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; // prepare fetch PUT options, clones with JS Spread Operator (...) const put_options = {...options, method: &#39;PUT&#39;}; // clones and replaces method . The below code uses a function called fetch to gather the data from the backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked in case the site is down and returns an error | On successful fetch, the code places each Joke in the HTML table body using a &quot;for&quot; loop and creating document elements from each &quot;row&quot; of the fetched &quot;data&quot;. | The creation of each Haha and Boohoo &quot;onclick&quot; &quot;button&quot; is also done in the same loop. | Updates to backend are setup to occur with each onclick, each click calls the &quot;reaction&quot; function | . // fetch the API fetch(url, options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&#39;GET API response failure: &#39; + response.status); return; } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); for (const row of data) { // make &quot;tr element&quot; for each &quot;row of data&quot; const tr = document.createElement(&quot;tr&quot;); // td for joke cell const joke = document.createElement(&quot;td&quot;); joke.innerHTML = row.id + &quot;. &quot; + row.joke; // add fetched data to innerHTML // td for haha cell with onclick actions const haha = document.createElement(&quot;td&quot;); const haha_but = document.createElement(&#39;button&#39;); haha_but.id = HAHA+row.id // establishes a HAHA JS id for cell haha_but.innerHTML = row.haha; // add fetched &quot;haha count&quot; to innerHTML haha_but.onclick = function () { // onclick function call with &quot;like parameters&quot; reaction(HAHA, like_url+row.id, haha_but.id); }; haha.appendChild(haha_but); // add &quot;haha button&quot; to haha cell // td for boohoo cell with onclick actions const boohoo = document.createElement(&quot;td&quot;); const boohoo_but = document.createElement(&#39;button&#39;); boohoo_but.id = BOOHOO+row.id // establishes a BOOHOO JS id for cell boohoo_but.innerHTML = row.boohoo; // add fetched &quot;boohoo count&quot; to innerHTML boohoo_but.onclick = function () { // onclick function call with &quot;jeer parameters&quot; reaction(BOOHOO, jeer_url+row.id, boohoo_but.id); }; boohoo.appendChild(boohoo_but); // add &quot;boohoo button&quot; to boohoo cell // this builds ALL td&#39;s (cells) into tr (row) element tr.appendChild(joke); tr.appendChild(haha); tr.appendChild(boohoo); // this adds all the tr (row) work above to the HTML &quot;result&quot; container resultContainer.appendChild(tr); } }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + url); }); . The below code uses fetch to update backend data using &quot;put_options&quot;. The purpose is to update Hahaa and Bohoo counters in backend. . Key things to understand: . The &quot;url&quot; &quot;response&quot; is checked to verify update occurred | The element id of button clicked is updated with the data returned from the API. | Note, the elemID is received as parameter. This data was setup when the button was created in former cell. | . // Reaction function to likes or jeers user actions function reaction(type, put_url, elemID) { // fetch the API fetch(put_url, put_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { error(&quot;PUT API response failure: &quot; + response.status) return; // api failure } // valid response will have JSON data response.json().then(data =&gt; { console.log(data); // Likes or Jeers updated/incremented if (type === HAHA) // like data element document.getElementById(elemID).innerHTML = data.haha; // fetched haha data assigned to haha Document Object Model (DOM) else if (type === BOOHOO) // jeer data element document.getElementById(elemID).innerHTML = data.boohoo; // fetched boohoo data assigned to boohoo Document Object Model (DOM) else error(&quot;unknown type: &quot; + type); // should never occur }) }) // catch fetch errors (ie Nginx ACCESS to server blocked) .catch(err =&gt; { error(err + &quot; &quot; + put_url); }); } // Something went wrong with actions or responses function error(err) { // log as Error in console console.error(err); // append error to resultContainer const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = err; tr.appendChild(td); resultContainer.appendChild(tr); } . Hacks . The code below relates to the rapidapi you worked with last week. . What are some similarities you see with the javascript for the jokes api? | In a blogpost, break up the code in cells like done above and try to describe what this code is doing. | . . Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Recorded Deaths Active Cases . .",
            "url": "https://shruthim0.github.io/repository2/techtalk/webfrontend",
            "relUrl": "/techtalk/webfrontend",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "API practice",
            "content": "Covid19 RapidAPI . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Spotify API . import requests url = &quot;https://spotify23.p.rapidapi.com/search/&quot; querystring = {&quot;q&quot;:&quot;Harry Styles&quot;,&quot;type&quot;:&quot;artists&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;10&quot;,&quot;numberOfTopResults&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spotify23.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;query&#34;:&#34;Harry+Styles&#34;,&#34;artists&#34;:{&#34;totalCount&#34;:51,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6KImCVD70vtIoJWnq6nGn3&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Harry Styles&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebf7db7c8ede90a019c54590bb&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178f7db7c8ede90a019c54590bb&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6wVLKQ3w2gCn11a0NQAkX0&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Harry Younger Styles&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:null}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:4AK6F7OLvEQ5QYCBNiQWHq&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;One Direction&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /289c7f686f5b78ceeb224453cf9a15697a678a79&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /6c89c662ad0ab75bc2af9a3ae2b16f811daced50&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6rq7VcWeCTjiBIIuGt0D96&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Harry Stone&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebb6f491a3465a8408d9062cf0&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178b6f491a3465a8408d9062cf0&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:7mOjyS2iRyUA5jGuoUzEhv&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;styles benin harry&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27398a414cadc31f38fb767f147&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485198a414cadc31f38fb767f147&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:2IrrH2ytG96HCP9dnM6mGr&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Twan Ray&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb76414483e902603927037c8d&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f17876414483e902603927037c8d&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:2tCELGtX6ikbBFQomLSCRp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Harry Stockwell&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:null}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6CbmeywK3diNOrfk5yxr2d&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;STYLES HARRY EDWARD&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27306b1f9b270b94fb192cfb449&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485106b1f9b270b94fb192cfb449&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:72fQWyXObQBgUIUejMo6js&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Molotov Cocktail Piano&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb5a9d38bfc76db9ba482d635f&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f1785a9d38bfc76db9ba482d635f&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1KDOjuXZPd8XA3YBakakMb&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Harry Shotta&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb1eaf3ed16e9ac9e629844890&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f1781eaf3ed16e9ac9e629844890&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}}],&#34;pagingInfo&#34;:{&#34;nextOffset&#34;:10,&#34;limit&#34;:10}}} . import requests url = &quot;https://spotify23.p.rapidapi.com/albums/&quot; querystring = {&quot;ids&quot;:&quot;Harry&#39;s House&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spotify23.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;error&#34;:{&#34;status&#34;:400,&#34;message&#34;:&#34;invalid id&#34;}} . fetch(&quot;https://type.fit/api/quotes&quot;) .then(function(response) { return response.json(); }) .then(function(data) { console.log(data); }); const settings = { &quot;async&quot;: true, &quot;crossDomain&quot;: true, &quot;url&quot;: &quot;https://type.fit/api/quotes&quot;, &quot;method&quot;: &quot;GET&quot; } $.ajax(settings).done(function (response) { const data = JSON.parse(response); console.log(data); }); . Input In [3] then(function(response) { ^ IndentationError: unexpected indent . const options = { method: &#39;POST&#39;, headers: { &#39;content-type&#39;: &#39;application/json&#39;, &#39;X-RapidAPI-Key&#39;: &#39;ec628c3848mshc2f96fd1e664c35p194b32jsna5ebcbef62b6&#39;, &#39;X-RapidAPI-Host&#39;: &#39;motivational-quotes1.p.rapidapi.com&#39; }, body: &#39;{&quot;key1&quot;:&quot;value&quot;,&quot;key2&quot;:&quot;value&quot;}&#39; }; fetch(&#39;https://motivational-quotes1.p.rapidapi.com/motivation&#39;, options) .then(response =&gt; response.json()) .then(response =&gt; console.log(response)) .catch(err =&gt; console.error(err)); response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . Input In [6] const options = { ^ SyntaxError: invalid syntax .",
            "url": "https://shruthim0.github.io/repository2/2022/10/20/api.html",
            "relUrl": "/2022/10/20/api.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(1+i) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user price = menu.get(item.lower()) print(price) . Menu burger $3.99 fries $1.99 drink $0.99 3.99 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? We may have caculation errors, errors that resulting in incorrect formatting for our game, or syntax errors. | What are some test cases that can be used? Running the code and seeing the result, altering different values and seeing the result. | Make sure to document any bugs you encounter and how you solved the problem. As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://shruthim0.github.io/repository2/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Using JavaScript",
            "content": "console.log(&quot;Fruits&quot;); . Fruits . var msg = &quot;I love fruits&quot;; console.log(msg); . I love fruits . function Fruit(name , color) { this.name = name; this.color = color; this.role = &quot;&quot;; } Fruit.prototype.setRole = function(role) { this.role = role; } Fruit.prototype.toJSON = function() { const obj = {name: this.name, color: this.color}; const json = JSON.stringify(obj); return json; } var x = new Fruit(&quot;Apple&quot;, &quot;red&quot;); logItType(x); logItType(x.toJSON()); scrollX.setRole(&quot;x&quot;); logItType(x); logItType(x.toJSON()); .",
            "url": "https://shruthim0.github.io/repository2/2022/09/25/notebookwithjavascriptusage.html",
            "relUrl": "/2022/09/25/notebookwithjavascriptusage.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Title",
            "content": "&lt;style type=&quot;text/css&quot;&gt; .tg {border-collapse:collapse;border-spacing:0;} .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; overflow:hidden;padding:10px 5px;word-break:normal;} .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px; font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;} .tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top} .tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top} &lt;/style&gt; &lt;table class=&quot;tg&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class=&quot;tg-0pky&quot;&gt;&lt;/th&gt; &lt;th class=&quot;tg-0pky&quot;&gt;Description&lt;/th&gt; &lt;th class=&quot;tg-0pky&quot;&gt;Link to Review Ticket&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Week 0&lt;/td&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Tool Setup&lt;/td&gt; &lt;td class=&quot;tg-0pky&quot;&gt;&lt;a href=&quot;https://github.com/shruthim0/repository2/issues/2#issue-1345599998&quot;&gt;&lt;span style=&quot;color:#905&quot;&gt;[link](https://github.com/shruthim0/repository2/issues/2#issue-1345599998)&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Week 1&lt;/td&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Intro to Python&lt;/td&gt; &lt;td class=&quot;tg-c3ow&quot;&gt;&lt;a href=&quot;https://github.com/shruthim0/repository2/issues/3#issue-1353592822&quot;&gt;&lt;span style=&quot;color:#905&quot;&gt;[link](https://github.com/shruthim0/repository2/issues/3#issue-1353592822)&lt;/span&gt;&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Week 2&lt;/td&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Data Abstraction&lt;/td&gt; &lt;td class=&quot;tg-c3ow&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=&quot;tg-0pky&quot;&gt;Week 3&lt;/td&gt; &lt;td class=&quot;tg-0pky&quot;&gt;&lt;/td&gt; &lt;td class=&quot;tg-c3ow&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; .",
            "url": "https://shruthim0.github.io/repository2/2022/09/25/notebookwithjavascript.html",
            "relUrl": "/2022/09/25/notebookwithjavascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Title",
            "content": "&lt;table&gt; &lt;tr&gt; &lt;td&gt;x3&lt;/td&gt; &lt;td&gt;x2&lt;/td&gt; &lt;td&gt;x1&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; . Input In [1] &lt;table&gt; ^ SyntaxError: invalid syntax . x3 | x2 | x1 | .",
            "url": "https://shruthim0.github.io/repository2/2022/09/25/notebookwithhtmltable.html",
            "relUrl": "/2022/09/25/notebookwithhtmltable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Making a Table with HTML",
            "content": "Rating Fruits . Fruit Description Rating . Apple | Only crisp apples the soggy ones are no bueno. | 7/10 | . Plum | One of the best fruits. But I absolutely despise the sour core. | 9172398723/10 | . Banana | Only good in smoothies | 5/10 | . Oranges | Lovely fruit | 9/10 | . Grapes | The crisp green ones are to die for | 11/10 | . Blueberries | Hit or miss fruit | 7/10 | . Watermelon | Anybody who doesn&#39;t like watermelon is just a no. | 9.1 * 10^67 | . Tomato | Why is it a fruit. | -12 | . html code: . . . .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/25/htmltable.html",
            "relUrl": "/markdown/2022/09/25/htmltable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Agile Methodology",
            "content": "7 Important Transferable Skills . Creativity Conceptualize problems and solutions | Display foresight | Make connections | Make intelligent inferences | Synthesize ideas and data | . | Critical thinking Solving complex or abstract problems requires critical thinking, especially when the problems are critical. Not only that, but critical thinking skills also enable the discovery of deficiencies that could cause less than optimal results. | Communication verbal skills | listening skills | writing skills | technological communication skills | . | Collaboration through Leadership Delegating responsibility | Demonstrating effective time management | Initiating new ideas | Major decision-making | Managing conflict | Managing groups | Multitasking | Teaching and mentoring | . | Collaboration Accepting responsibility | Making and implementing decisions | Managing time wisely | Meeting both short- and long-term goals | Organizing | Setting and meeting deadlines | . | Researching Analyzing information | Brainstorming solutions | Delineating needs and requirements | Extracting information from data | Gathering information | Forecasting possible roadblocks | Setting goals | Solving problems | . | Technical Being easy to work with | Quick to learn | Glad to learn | Failing and always willing to try new things | Willing to open new doors in case of a drastic oversight | . | .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/25/agilemethodologynotes.html",
            "relUrl": "/markdown/2022/09/25/agilemethodologynotes.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Psychology and the Good Life notes",
            "content": "Psychology and the Good Life notes . Vocabulary . Time Affluence- the sense that you have enough time available on a daily basis. | Time Famine- the feeling you do not have enough time. | . Big Ideas . Yale Students feel that…. Stress makes them feel like their college experience isn’t complete. | They are always anxious and stressed. | Too stressed to enjoy their life. | Too busy to utilize the opportunities they have available at Yale. | Students don’t communicate their needs or struggles. | | . Glitches in our mind: . The mind creates illusions on what we think will give us happiness. | People predict themselves/events. This often sets the expectation too high/low. | Adapting to Glitches . Prioritize your social health. | Giving to others. | Become more positive. Learn to be greatful for what you have; focus less on the negatives. | Prioritize your health; sleep and rest are very important. | Take your time; be in the present don’t always be stressed for the future. | Grateful List . my friends and family for supporting me | my hobbies: reading, painting, running | the resouces I have being born in the US | being able to recieve an education |",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/21/Psychologyandthegoodlife.html",
            "relUrl": "/markdown/2022/09/21/Psychologyandthegoodlife.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "College Board 1.1 Collaboration Notes",
            "content": "!!!! . College Board 1.1 Collaboration Notes . Collaboration allows less pressure/responsibility per person | exchange of ideas | more problem solving resources | . | Diversity in development allows more points of view | input based on different experiences | . |",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/13/cb1.1notes.html",
            "relUrl": "/markdown/2022/09/13/cb1.1notes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Brainstorming Ideas for APCSP Preformance Task",
            "content": "App Ideas . journal app with prompts random prompts will be given | use has set amount per prompt | user also has option to free write | inputs are stored and can be accessed by user | . | writing practice app random prompts will be given to user | user has a set amount of time to write about given prompt | user&#39;s input is stored and can be accessed by user | . | drawing app | planner app | calculator app | . Things I can do: . InfoDb = [] # defining an empty list InfoDb.append({ # to append values to list print(InfoDb) # will print the data structure # While loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = Quiz[i] print (record) i += 1 return while_loop() .",
            "url": "https://shruthim0.github.io/repository2/2022/09/11/preformancestaskbrainstorm.html",
            "relUrl": "/2022/09/11/preformancestaskbrainstorm.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Planning out AppLab Quiz",
            "content": "Planning out AppLabQuiz . My Quiz . – . Quiz Topic . Quiz on Del Norte | . . Content . 3 questions | school colors, mascot, location | calculate score at the end | . . Features I Tried Out . Score Calculation: I started by defining the variable “score” as 0. After each correct answer, a point is added to the initial score. I later called on this variable at the end when the user clicks on the “Calculate Score” button. Personalization: The Quiz also starts by asking for the user’s name and storing the user’s input as a variable. I added this feature with this command: - var y = prompt(“What is your name?”); Later I called on this variable when presenting the score as “_____’s Score is __/3” . . Features I’m Adding . Record of Quiz Answers: I want to store the user’s answers in a Dictionary and then make either a for loop or while loop that displays a record of the user’s quiz on request. .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/11/applabquizoverview.html",
            "relUrl": "/markdown/2022/09/11/applabquizoverview.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Time Stamp",
            "content": "  Description Link to Review Ticket . Week 0 | Tool Setup | link | . Week 1 | Intro to Python | link | . Week 2 | Data Abstraction |   | . Week 3 |   |   | .",
            "url": "https://shruthim0.github.io/repository2/school/2022/09/06/timestamp.html",
            "relUrl": "/school/2022/09/06/timestamp.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "My Daily Schedule",
            "content": "My Daily Schedule .     Monday Tuesday Wednesday Thursday Friday Saturday Sunday .   |   |   |   |   |   |   |   |   | . P1: AP Chemistry |   | 8:35 - 9:44 | 8:35 - 9:44 | 9:55 - 10:53 | 8:35 - 9:44 | 8:35 - 9:49 | - | - | . P2: AP Calculus BC |   | 9:49 -10:58 | 9:49 -10:58 | 10:58 - 11:56 | 9:49 -10:58 | 9:54 - 11:08 | - | - | . P3: AP English Language |   | 11:13 - 12:22 | 11:13 - 12:22 | 12:11 - 1:09 | 11:13 - 12:22 | 11:23 - 12:37 | - | - | . P4: AP Computer Science Principles |   | 12:57 - 2:06 | 12:57 - 2:06 | 1:44 - 2:42 | 12:57 - 2:06 | 1:12 - 2:26 | - | - | . P5: Orchestra |   | 2:36 - 3:45 | 2:36 - 3:45 | 2:47 - 3:45 | 2:36 - 3:45 | 2:31 - 3:45 |   |   | . After School |   | violin lessons mock trial | vocal lessons | piano lessons | teach lessons | theory classes | teach lessons |   | .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/05/htmlfragments.html",
            "relUrl": "/markdown/2022/09/05/htmlfragments.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Lists, Dictionaries, and Iterations",
            "content": "Append to List a Dictionary of key/values related to a person . InfoDb = [] InfoDb.append({ &quot;First_Name&quot;: &quot;Shruthi&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14 2006&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Hobbies&quot;: &quot;Watching movies, drawing, and sleeping&quot;, &quot;Favorite_Color&quot;: [&quot;green&quot;], } InfoDb.append({ &quot;First_Name&quot;: &quot;Kavya&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30 2009&quot;, &quot;Email&quot;: &quot;kavyamalayath@com&quot;, &quot;Hobbies&quot;: &quot;Reading&quot;, &quot;Favorite_Color&quot;: [&quot;purple&quot;], }) InfoDb.append({ &quot;First_Name&quot;: &quot;Snow&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;March 31 2020&quot;, &quot;Email&quot;: &quot;she&#39;s a dog&quot;, &quot;Hobbies&quot;: &quot;chewing furniture&quot;, &quot;Favorite_Color&quot;: [&quot;blue&quot;], }) print(InfoDb) . [{&#39;First_Name&#39;: &#39;Shruthi&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;April 14 2006&#39;, &#39;Email&#39;: &#39;shmalayath@gmail.com&#39;, &#39;Hobbies&#39;: &#39;Watching movies, drawing, and sleeping&#39;, &#39;Favorite_Color&#39;: [&#39;green&#39;]}, {&#39;First_Name&#39;: &#39;Kavya&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;August 30 2009&#39;, &#39;Email&#39;: &#39;kavyamalayath@com&#39;, &#39;Hobbies&#39;: &#39;Reading&#39;, &#39;Favorite_Color&#39;: [&#39;purple&#39;]}, {&#39;First_Name&#39;: &#39;Snow&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;March 31 2020&#39;, &#39;Email&#39;: &#34;she&#39;s a dog&#34;, &#39;Hobbies&#39;: &#39;chewing furniture&#39;, &#39;Favorite_Color&#39;: [&#39;blue&#39;]}] . A For Loop . def print_data(d_rec): print(d_rec[&quot;First_Name&quot;], d_rec[&quot;Last_Name&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;DOB:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Hobbies:&quot;, d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;Favorite Color: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Favorite_Color&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;Information on: n&quot;) for record in InfoDb: print_data(record) for_loop() . Information on: Shruthi Malayath DOB: April 14 2006 email: shmalayath@gmail.com Hobbies: Watching movies, drawing, and sleeping Favorite Color:green Kavya Malayath DOB: August 30 2009 email: kavyamalayath@com Hobbies: Reading Favorite Color:purple Snow Malayath DOB: March 31 2020 email: she&#39;s a dog Hobbies: chewing furniture Favorite Color:blue . Making a Quiz that Stores in a List of Dictionaries . import getpass, sys questions = 6 correct = 0 print(&#39;Hello, &#39; + getpass.getuser()) print(&quot; t&quot;, &quot;You will be asked &quot; + str(questions) + &quot; questions on world history.&quot;) print(&quot; t&quot;, getpass.getuser() + &quot; you must use proper capitalization on this quiz!!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) rsp = input() if rsp == answer : print(&quot; t&quot;, rsp + &quot; is correct!&quot;) global correct correct += 1 else: print (&quot; t&quot;, rsp + &quot; is incorrect!&quot;) return rsp Question_1 = question_and_answer(&quot;What year did WWI start?&quot;, &quot;1914&quot;) Question_2 = question_and_answer(&quot;The event in 1968 where Soviet troops stormed Czechoslovakia to crack down on reforms:&quot;, &quot;Prague Spring&quot;) Question_3 = question_and_answer(&quot;What is the first name of the Soviet Union president involved in the Cuban Missile Crisis&quot;, &quot;Nikita&quot;) Question_4 = question_and_answer(&quot;When were India and Pakistan divided?&quot;, &quot;1947&quot;) Question_5 = question_and_answer(&quot;The _____ dynasty marks the last of the Chinese emperors&quot;, &quot;Qing&quot;) Question_6 = question_and_answer(&quot;Due to liberation of many African nations, the year 1960 is known as the...&quot;, &quot;Year of Africa&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) Quiz = [] Quiz.append({ &quot;Q_1&quot;: Question_1, &quot;Q_2&quot;: Question_2, &quot;Q_3&quot;: Question_3, &quot;Q_4&quot;: Question_4, &quot;Q_5&quot;: Question_5 }) def print_data(d_rec): print(&quot;Question 1:&quot;, d_rec[&quot;Q_1&quot;]) print(&quot;Question 2:&quot;, d_rec[&quot;Q_2&quot;]) print(&quot;Question 3:&quot;, d_rec[&quot;Q_3&quot;]) print(&quot;Question 4:&quot;, d_rec[&quot;Q_4&quot;]) print(&quot;Question 5:&quot;, d_rec[&quot;Q_5&quot;], end=&quot;&quot;) print(&quot; n n n&quot;) print(&quot;--&quot;) print(&quot;Here is a record of your quiz:&quot;) def for_loop(): print(&quot;For loop output n&quot;) for record in Quiz: print_data(record) for_loop() . Hello, shruthim You will be asked 6 questions on world history. shruthim you must use proper capitalization on this quiz!! Question: What year did WWI start? 1914 is correct! Question: The event in 1968 where Soviet troops stormed Czechoslovakia to crack down on reforms: Prague Spring is correct! Question: What is the first name of the Soviet Union president involved in the Cuban Missile Crisis Nikita is correct! Question: When were India and Pakistan divided? 1947 is correct! Question: The _____ dynasty marks the last of the Chinese emperors Qing is correct! Question: Due to liberation of many African nations, the year 1960 is known as the... Year of Africa is correct! shruthim you scored 6/6!! -- Here is a record of your quiz: For loop output Question 1: 1914 Question 2: Prague Spring Question 3: Nikita Question 4: 1947 Question 5: Qing .",
            "url": "https://shruthim0.github.io/repository2/2022/09/02/lists_dictionaries_iterations.html",
            "relUrl": "/2022/09/02/lists_dictionaries_iterations.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Shruthi&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;-&quot;] }) # Append to List a 4th Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Kavya&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kavyam@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;pls no&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Shruthi&#39;, &#39;LastName&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;April 14&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;shmalayath@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;-&#39;]}, {&#39;FirstName&#39;: &#39;Kavya&#39;, &#39;LastName&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;August 30th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;kavyam@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;pls no&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shruthi Malayath Residence: San Diego Birth Day: April 14 Cars: - Kavya Malayath Residence: San Diego Birth Day: August 30th Cars: pls no . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = Quiz[i] print (record) i += 1 return while_loop() . While loop output . NameError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb Cell 9 in &lt;cell line: 11&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; i += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; while_loop() /home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb Cell 9 in while_loop() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; print(&#34;While loop output n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; i = 0 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; while i &lt; len(InfoDb): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; record = InfoDb[i] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print_data(record) NameError: name &#39;InfoDb&#39; is not defined . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shruthi Malayath Residence: San Diego Birth Day: April 14 Cars: - Kavya Malayath Residence: San Diego Birth Day: August 30th Cars: pls no . InfoDb = [] # Append to List a 1st Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Shruthi&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Hobby&quot;: [&quot;Painting, Reading, Sleeping&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Kavya&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kavyam@gmail.com&quot;, &quot;Hobby&quot;: [&quot;Reading&quot;] }) print(&quot;What is your Name?&quot;) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot;Where do you live?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot;When is your birthday?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot;What are your hoobies?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Hobby: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobby&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . What is your Name? Where do you live? When is your birthday? What are your hoobies? For loop output Hobby: Painting, Reading, Sleeping Hobby: Reading .",
            "url": "https://shruthim0.github.io/repository2/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Class Notes and Resources",
            "content": "Weeks: 08/22-08/29 . AP Chemistry Learned: stoichiometry unit, had a practice frq | Things to get done memorize Polyatomic Ions | memorize Solubility Rules | take notes on stoichiometry methods | . | . | AP Calculus BC Learned: Review of Limits (limits to infinity, absolute value limits, squeeze theorem, essential trig limits), started Derivative Unit (limit definition,…) | Things to get done Finish Unit 1 Closure | Finish Friday HW | Study for Test 1 (09/1) | Finish (08/29) cw/hw | . | . | AP English Language Learned: how to write a precis, different rhetorical strategies, 2 different thesis formats, proper introduction paragraph format. | Things to get done Study rhetorical strategies to prepare for on-demand (08/31) | proof-read notesbook for check (08/31) | . | . | AP Computer Science Principles Things to get done post issue with Week 2 assignment links | . | . | Orchestra Things to get done practice for auditions (09/05) | maybe practice scaled | . | . | .",
            "url": "https://shruthim0.github.io/repository2/school/2022/08/28/schoolnotes.html",
            "relUrl": "/school/2022/08/28/schoolnotes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/shruthim/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/shruthim/.local/share/jupyter/kernels/bash javascript /home/shruthim/.local/share/jupyter/kernels/javascript python3 /home/shruthim/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/shruthim/.local/share/jupyter/kernels/python3 .",
            "url": "https://shruthim0.github.io/repository2/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Python Quiz",
            "content": "First, answering the provided questions: . def question_and_answer(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken print(&quot;Answer: &quot; + msg) # prints the user&#39;s input/answer question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Question: Name the Python output command mentioned in this lesson? . KeyboardInterrupt Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb Cell 3 in &lt;cell line: 6&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; msg = input() # the user&#39;s input/answer is taken &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(&#34;Answer: &#34; + msg) # prints the user&#39;s input/answer -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; question_and_answer(&#34;Name the Python output command mentioned in this lesson?&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; question_and_answer(&#34;If you see many lines of code in order, what would College Board call it?&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; question_and_answer(&#34;Describe a keyword used in Python to define a function?&#34;) /home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb Cell 3 in question_and_answer(prompt) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; def question_and_answer(prompt): # defines question_and_answer &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; print(&#34;Question: &#34; + prompt) # asks the question -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; msg = input() # the user&#39;s input/answer is taken &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-24-pythonquiz.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(&#34;Answer: &#34; + msg) File ~/.local/lib/python3.8/site-packages/ipykernel/kernelbase.py:1177, in Kernel.raw_input(self, prompt) 1173 if not self._allow_stdin: 1174 raise StdinNotImplementedError( 1175 &#34;raw_input was called, but this frontend does not support input requests.&#34; 1176 ) -&gt; 1177 return self._input_request( 1178 str(prompt), 1179 self._parent_ident[&#34;shell&#34;], 1180 self.get_parent(&#34;shell&#34;), 1181 password=False, 1182 ) File ~/.local/lib/python3.8/site-packages/ipykernel/kernelbase.py:1219, in Kernel._input_request(self, prompt, ident, parent, password) 1216 break 1217 except KeyboardInterrupt: 1218 # re-raise KeyboardInterrupt, to truncate traceback -&gt; 1219 raise KeyboardInterrupt(&#34;Interrupted by user&#34;) from None 1220 except Exception: 1221 self.log.warning(&#34;Invalid Message:&#34;, exc_info=True) KeyboardInterrupt: Interrupted by user . import getpass, sys def question_with_response(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken return msg # returns as string value questions = 3 # total number of questions correct = 0 # number that is initially correct (before any questions are answered) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: # establishing if/else statement; if user&#39;s input is &quot;import&quot; print(rsp + &quot; is correct!&quot;) # then it is correct correct += 1 # one point is added to number correct score else: print(rsp + &quot; is incorrect!&quot;) # if user&#39;s input is not &quot;import,&quot; than user is incorrect rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # print&#39;s user&#39;s score . Hello, shruthim running /usr/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! shruthim you scored 3/3 . Creating my own quiz (based on CollegeBoard&#39;s vocabulary): . print (&quot;Hello World&quot;) # image 1 . msg = input(&quot;Enter a greeting: &quot;) #image 2 print(msg) . import getpass, sys def question_with_response(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken return msg # returns as string value questions = 5 # total number of questions correct = 0 # number that is initially correct (before any questions are answered) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions!&quot;) question_and_answer(&quot;Are you ready to take this fun test on Python syntax?&quot;) rsp = question_with_response (&quot;In image 1, Hello, World is what kind of text?&quot;) if rsp == &quot;static&quot; or rsp == &quot;output&quot;: # establishing if/else statement; if user&#39;s input is &quot;static&quot; or &quot;output&quot; print(rsp + &quot; is correct!&quot;) # then it is correct correct += 1 # one point is added to number correct score else: print(rsp + &quot; is incorrect :(&quot;) # if user&#39;s input is not &quot;import,&quot; than user is incorrect rsp = question_with_response(&quot;In image 1, what is the output?&quot;) if rsp == &quot;Hello World&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;In image 2, because the inputs and outputs can ______, the code is _______ &quot;) if rsp == &quot;change and dynamic&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;The variable, msg, is then used as a _______ to the print command&quot;) if rsp == &quot;parameter&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;What is it grouping a sequence of commands, often used repeatedly, called?&quot;) if rsp == &quot;procedural abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) # print&#39;s user&#39;s score . Hello, shruthim running /usr/bin/python3 You will be asked 5 questions! Question: Are you ready to take this fun test on Python syntax? Answer: yes Question: In image 1, Hello, World is what kind of text? static is correct! Question: In image 1, what is the output? Hello World is correct! Question: In image 2, because the inputs and outputs can ______, the code is _______ change and dynamic is correct! Question: The variable, msg, is then used as a _______ to the print command parameter is correct! Question: What is it grouping a sequence of commands, often used repeatedly, called? procedural abstraction is correct! shruthim you scored 5/5!! .",
            "url": "https://shruthim0.github.io/repository2/2022/08/24/pythonquiz.html",
            "relUrl": "/2022/08/24/pythonquiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "First Markdown Post !",
            "content": "First Level of Heading . Second Level of Heading !! . Third Level of Heading . and even more . and more . . Basic Stuff . italics | bold text | code font!! | create links | strikethrough text | make bulleted lists: item 1 | item 1a | item 1b | . | . Goals . I hope to improve my programming and problem solving skills :) .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/08/21/firstmarkdownpost.html",
            "relUrl": "/markdown/2022/08/21/firstmarkdownpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Jupyter Notebook- "Hello" with Python",
            "content": "print (&quot;Hello! ....&quot;) . Hello! .... .",
            "url": "https://shruthim0.github.io/repository2/2022/08/21/firstjupyternotebook.html",
            "relUrl": "/2022/08/21/firstjupyternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! My name is Shruthi and I’m a junior at DNHS! .",
          "url": "https://shruthim0.github.io/repository2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
      ,"page5": {
          "title": "Notes",
          "content": "Week 0 . Downloading and Setting up Tools | PowerShell cd = change directory | cd ~ = change directory to home | ls = list files | code . = opens up VSCode | . | Markdown #,##,##-size of font | italics | bold | strikethrough | . | . Week 1 . Python print (“text”) = will print what is in the quotes | def = used to define a function | import = imports a function | . | Markdown embed an image: use site.baseur | . | . Unit 2 . bits: the single unit of information in a computer, typically represented as a 0 or 1 | bytes: grouping of 8 bits | hexadecimal/nibbles: numbering system with base 16 | binary numbers unsigted integer: whole numbers) but have the property that they don’t have a + or - sign associated with them. Thus they are always non-negative (zero or positive). | signed integer: A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647] | floating point: arithmetic that represents real numbers approximately, using an integer with a fixed precision, called the significand | . | Binary Data Abstractions Boolean: a value that is either true or false (1 or 0) | ASCII: a character encoding standard for electronic communication; diff symbols stand for different numbers; used 1 byte | Unicode: Unicode is a universal character encoding standard. This standard includes roughly 100000 characters to represent characters of different languages; used 4 bytes | RGB: color model based on red value, green value, and blue value. | . | Data Compression: Lossy: Lossy compression reduces a file by permanently eliminating certain information, especially redundant information. When the file is uncompressed, some of the original information is not there, although the user may not notice it. | Lossless: Every bit of data originally in a file remains after it is uncompressed, and all the information is restored. | . | . Unit 3… Algorithm/Programming Terms . Variables: A value that can change, depending on conditions or on information passed to the program. A variable can be assigned to a certain integer, float, string… | Data Types: a classification that specifies which type of value a variable has and what type of mathematical, relational or logical operations can be applied to it without causing an error. | Assignment Operators: sets and/or re-sets the value stored in the storage location(s) denoted by a variable name; in other words, it copies a value into the variable | Managing Complexity with Variables Lists: an abstract data type that represents a finite number of ordered values, where the same value may occur more than once. | 2D Lists: 2D array is a collection of data cells, all of the same type, which can be given a single name | Dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | Class: static variable that can be declared anywhere at class level with static | . | Algorithms: a small procedure that solves a recurrent problem | Sequence: the order in which statements are executed | Selection: a programming construct where a section of code is run only if a condition is met | Iteration: when the same procedure is repeated multiple times. | Expressions: a combination of values and functions that are combined and interpreted by the compiler to create a new value, as opposed to a “statement” which is just a standalone unit of execution and doesn’t return anything | Comparison Operators: &gt;, &lt;=, &lt;, =&gt;, ==… operators that compare | Truth Tables: A truth table is a way of summarising and checking the logic of a circuit. The table shows all possible combinations of inputs and, for each combination, the output that the circuit will produce. | Characters: a display unit of information equivalent to one alphabetic letter or symbo (char) | Strings: A string is generally considered a data type and is often implemented as an array data structure of bytes (or words) that stores a sequence of elements, typically characters, using some character encoding. | Length: of a string | Concatenation: combining 2 strings | Traversing Strings: accessing all the elements of the string one after the other by using the subscript | Python If: a statement with an if condition | Elif: else if statement, - if x is true then _, else do __ | Else conditionals: a statement with an else condition– if x __ else __ | Nested Selection Statements: selection statements that are nested within themselves (see example) | Python For While loops with Range: a for/while loop that uses the range() function | Python for/while loop with with List: a while/for loop that iterates through a list and applies a certain algo to items in list | Combining loops with conditionals to Break: For certain conditions, the loop will terminate exectution | Python Def procedures (see code block 1) | Parameters: values that are passed through a function | Return Values: a value that a function returns to the calling script or function when it completes its task | .",
          "url": "https://shruthim0.github.io/repository2/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shruthim0.github.io/repository2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}