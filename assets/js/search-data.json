{
  
    
        "post0": {
            "title": "Psychology and the Good Life notes",
            "content": "Psychology and the Good Life notes . Vocabulary . Time Affluence- the sense that you have enough time available on a daily basis. | Time Famine- the feeling you do not have enough time. | . Big Ideas . Yale Students feel that…. Stress makes them feel like their college experience isn’t complete. | They are always anxious and stressed. | Too stressed to enjoy their life. | Too busy to utilize the opportunities they have available at Yale. | Students don’t communicate their needs or struggles. | | . Glitches in our mind: . The mind creates illusions on what we think will give us happiness. | People predict themselves/events. This often sets the expectation too high/low. | Adapting to Glitches . Prioritize your social health. | Giving to others. | Become more positive. Learn to be greatful for what you have; focus less on the negatives. | Prioritize your health; sleep and rest are very important. | Take your time; be in the present don’t always be stressed for the future. | Grateful List . my friends and family for supporting me | my hobbies: reading, painting, running | the resouces I have being born in the US | being able to recieve an education |",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/21/Psychologyandthegoodlife.html",
            "relUrl": "/markdown/2022/09/21/Psychologyandthegoodlife.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board 1.1 Collaboration Notes",
            "content": "!!!! . College Board 1.1 Collaboration Notes . Collaboration allows less pressure/responsibility per person | exchange of ideas | more problem solving resources | . | Diversity in development allows more points of view | input based on different experiences | . |",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/13/cb1.1notes.html",
            "relUrl": "/markdown/2022/09/13/cb1.1notes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Brainstorming Ideas for APCSP Preformance Task",
            "content": "App Ideas . journal app with prompts random prompts will be given | use has set amount per prompt | user also has option to free write | inputs are stored and can be accessed by user | . | writing practice app random prompts will be given to user | user has a set amount of time to write about given prompt | user&#39;s input is stored and can be accessed by user | . | drawing app | planner app | calculator app | . Things I can do: . InfoDb = [] # defining an empty list InfoDb.append({ # to append values to list print(InfoDb) # will print the data structure # While loop contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = Quiz[i] print (record) i += 1 return while_loop() .",
            "url": "https://shruthim0.github.io/repository2/2022/09/11/preformancestaskbrainstorm.html",
            "relUrl": "/2022/09/11/preformancestaskbrainstorm.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Planning out AppLab Quiz",
            "content": "Planning out AppLabQuiz . My Quiz . – . Quiz Topic . Quiz on Del Norte | . . Content . 3 questions | school colors, mascot, location | calculate score at the end | . . Features I Tried Out . Score Calculation: I started by defining the variable “score” as 0. After each correct answer, a point is added to the initial score. I later called on this variable at the end when the user clicks on the “Calculate Score” button. Personalization: The Quiz also starts by asking for the user’s name and storing the user’s input as a variable. I added this feature with this command: - var y = prompt(“What is your name?”); Later I called on this variable when presenting the score as “_____’s Score is __/3” . . Features I’m Adding . Record of Quiz Answers: I want to store the user’s answers in a Dictionary and then make either a for loop or while loop that displays a record of the user’s quiz on request. .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/11/applabquizoverview.html",
            "relUrl": "/markdown/2022/09/11/applabquizoverview.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Time Stamp",
            "content": "  Description Link to Review Ticket . Week 0 | Tool Setup | link | . Week 1 | Intro to Python | link | . Week 2 | Data Abstraction |   | . Week 3 |   |   | .",
            "url": "https://shruthim0.github.io/repository2/school/2022/09/06/timestamp.html",
            "relUrl": "/school/2022/09/06/timestamp.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "My Daily Schedule",
            "content": "My Daily Schedule .     Monday Tuesday Wednesday Thursday Friday Saturday Sunday .   |   |   |   |   |   |   |   |   | . P1: AP Chemistry |   | 8:35 - 9:44 | 8:35 - 9:44 | 9:55 - 10:53 | 8:35 - 9:44 | 8:35 - 9:49 | - | - | . P2: AP Calculus BC |   | 9:49 -10:58 | 9:49 -10:58 | 10:58 - 11:56 | 9:49 -10:58 | 9:54 - 11:08 | - | - | . P3: AP English Language |   | 11:13 - 12:22 | 11:13 - 12:22 | 12:11 - 1:09 | 11:13 - 12:22 | 11:23 - 12:37 | - | - | . P4: AP Computer Science Principles |   | 12:57 - 2:06 | 12:57 - 2:06 | 1:44 - 2:42 | 12:57 - 2:06 | 1:12 - 2:26 | - | - | . P5: Orchestra |   | 2:36 - 3:45 | 2:36 - 3:45 | 2:47 - 3:45 | 2:36 - 3:45 | 2:31 - 3:45 |   |   | . After School |   | violin lessons mock trial | vocal lessons | piano lessons | teach lessons | theory classes | teach lessons |   | .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/09/05/htmlfragments.html",
            "relUrl": "/markdown/2022/09/05/htmlfragments.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Lists, Dictionaries, and Iterations",
            "content": "Append to List a Dictionary of key/values related to a person . InfoDb = [] InfoDb.append({ &quot;First_Name&quot;: &quot;Shruthi&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14 2006&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Hobbies&quot;: &quot;Watching movies, drawing, and sleeping&quot;, &quot;Favorite_Color&quot;: [&quot;green&quot;], } InfoDb.append({ &quot;First_Name&quot;: &quot;Kavya&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30 2009&quot;, &quot;Email&quot;: &quot;kavyamalayath@com&quot;, &quot;Hobbies&quot;: &quot;Reading&quot;, &quot;Favorite_Color&quot;: [&quot;purple&quot;], }) InfoDb.append({ &quot;First_Name&quot;: &quot;Snow&quot;, &quot;Last_Name&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;March 31 2020&quot;, &quot;Email&quot;: &quot;she&#39;s a dog&quot;, &quot;Hobbies&quot;: &quot;chewing furniture&quot;, &quot;Favorite_Color&quot;: [&quot;blue&quot;], }) print(InfoDb) . [{&#39;First_Name&#39;: &#39;Shruthi&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;April 14 2006&#39;, &#39;Email&#39;: &#39;shmalayath@gmail.com&#39;, &#39;Hobbies&#39;: &#39;Watching movies, drawing, and sleeping&#39;, &#39;Favorite_Color&#39;: [&#39;green&#39;]}, {&#39;First_Name&#39;: &#39;Kavya&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;August 30 2009&#39;, &#39;Email&#39;: &#39;kavyamalayath@com&#39;, &#39;Hobbies&#39;: &#39;Reading&#39;, &#39;Favorite_Color&#39;: [&#39;purple&#39;]}, {&#39;First_Name&#39;: &#39;Snow&#39;, &#39;Last_Name&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;March 31 2020&#39;, &#39;Email&#39;: &#34;she&#39;s a dog&#34;, &#39;Hobbies&#39;: &#39;chewing furniture&#39;, &#39;Favorite_Color&#39;: [&#39;blue&#39;]}] . A For Loop . def print_data(d_rec): print(d_rec[&quot;First_Name&quot;], d_rec[&quot;Last_Name&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;DOB:&quot;, d_rec[&quot;DOB&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Hobbies:&quot;, d_rec[&quot;Hobbies&quot;]) print(&quot; t&quot;, &quot;Favorite Color: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Favorite_Color&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;Information on: n&quot;) for record in InfoDb: print_data(record) for_loop() . Information on: Shruthi Malayath DOB: April 14 2006 email: shmalayath@gmail.com Hobbies: Watching movies, drawing, and sleeping Favorite Color:green Kavya Malayath DOB: August 30 2009 email: kavyamalayath@com Hobbies: Reading Favorite Color:purple Snow Malayath DOB: March 31 2020 email: she&#39;s a dog Hobbies: chewing furniture Favorite Color:blue . Making a Quiz that Stores in a List of Dictionaries . import getpass, sys questions = 6 correct = 0 print(&#39;Hello, &#39; + getpass.getuser()) print(&quot; t&quot;, &quot;You will be asked &quot; + str(questions) + &quot; questions on world history.&quot;) print(&quot; t&quot;, getpass.getuser() + &quot; you must use proper capitalization on this quiz!!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) rsp = input() if rsp == answer : print(&quot; t&quot;, rsp + &quot; is correct!&quot;) global correct correct += 1 else: print (&quot; t&quot;, rsp + &quot; is incorrect!&quot;) return rsp Question_1 = question_and_answer(&quot;What year did WWI start?&quot;, &quot;1914&quot;) Question_2 = question_and_answer(&quot;The event in 1968 where Soviet troops stormed Czechoslovakia to crack down on reforms:&quot;, &quot;Prague Spring&quot;) Question_3 = question_and_answer(&quot;What is the first name of the Soviet Union president involved in the Cuban Missile Crisis&quot;, &quot;Nikita&quot;) Question_4 = question_and_answer(&quot;When were India and Pakistan divided?&quot;, &quot;1947&quot;) Question_5 = question_and_answer(&quot;The _____ dynasty marks the last of the Chinese emperors&quot;, &quot;Qing&quot;) Question_6 = question_and_answer(&quot;Due to liberation of many African nations, the year 1960 is known as the...&quot;, &quot;Year of Africa&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) Quiz = [] Quiz.append({ &quot;Q_1&quot;: Question_1, &quot;Q_2&quot;: Question_2, &quot;Q_3&quot;: Question_3, &quot;Q_4&quot;: Question_4, &quot;Q_5&quot;: Question_5 }) def print_data(d_rec): print(&quot;Question 1:&quot;, d_rec[&quot;Q_1&quot;]) print(&quot;Question 2:&quot;, d_rec[&quot;Q_2&quot;]) print(&quot;Question 3:&quot;, d_rec[&quot;Q_3&quot;]) print(&quot;Question 4:&quot;, d_rec[&quot;Q_4&quot;]) print(&quot;Question 5:&quot;, d_rec[&quot;Q_5&quot;], end=&quot;&quot;) print(&quot; n n n&quot;) print(&quot;--&quot;) print(&quot;Here is a record of your quiz:&quot;) def for_loop(): print(&quot;For loop output n&quot;) for record in Quiz: print_data(record) for_loop() . Hello, shruthim You will be asked 6 questions on world history. shruthim you must use proper capitalization on this quiz!! Question: What year did WWI start? 1914 is correct! Question: The event in 1968 where Soviet troops stormed Czechoslovakia to crack down on reforms: Prague Spring is correct! Question: What is the first name of the Soviet Union president involved in the Cuban Missile Crisis Nikita is correct! Question: When were India and Pakistan divided? 1947 is correct! Question: The _____ dynasty marks the last of the Chinese emperors Qing is correct! Question: Due to liberation of many African nations, the year 1960 is known as the... Year of Africa is correct! shruthim you scored 6/6!! -- Here is a record of your quiz: For loop output Question 1: 1914 Question 2: Prague Spring Question 3: Nikita Question 4: 1947 Question 5: Qing .",
            "url": "https://shruthim0.github.io/repository2/2022/09/02/lists_dictionaries_iterations.html",
            "relUrl": "/2022/09/02/lists_dictionaries_iterations.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Shruthi&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;-&quot;] }) # Append to List a 4th Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Kavya&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kavyam@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;pls no&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Shruthi&#39;, &#39;LastName&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;April 14&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;shmalayath@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;-&#39;]}, {&#39;FirstName&#39;: &#39;Kavya&#39;, &#39;LastName&#39;: &#39;Malayath&#39;, &#39;DOB&#39;: &#39;August 30th&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;kavyam@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;pls no&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shruthi Malayath Residence: San Diego Birth Day: April 14 Cars: - Kavya Malayath Residence: San Diego Birth Day: August 30th Cars: pls no . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = Quiz[i] print (record) i += 1 return while_loop() . While loop output . NameError Traceback (most recent call last) /home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb Cell 9 in &lt;cell line: 11&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; i += 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; while_loop() /home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb Cell 9 in while_loop() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; print(&#34;While loop output n&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; i = 0 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; while i &lt; len(InfoDb): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; record = InfoDb[i] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shruthim/vscode/repository2/_notebooks/2022-08-29-TP120-pythonlists.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print_data(record) NameError: name &#39;InfoDb&#39; is not defined . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Shruthi Malayath Residence: San Diego Birth Day: April 14 Cars: - Kavya Malayath Residence: San Diego Birth Day: August 30th Cars: pls no . InfoDb = [] # Append to List a 1st Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Shruthi&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;April 14&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shmalayath@gmail.com&quot;, &quot;Hobby&quot;: [&quot;Painting, Reading, Sleeping&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Kavya&quot;, &quot;LastName&quot;: &quot;Malayath&quot;, &quot;DOB&quot;: &quot;August 30th&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;kavyam@gmail.com&quot;, &quot;Hobby&quot;: [&quot;Reading&quot;] }) print(&quot;What is your Name?&quot;) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot;Where do you live?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot;When is your birthday?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot;What are your hoobies?&quot;) def print_data(d_rec): print(&quot; t&quot;, &quot;Hobby: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobby&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . What is your Name? Where do you live? When is your birthday? What are your hoobies? For loop output Hobby: Painting, Reading, Sleeping Hobby: Reading .",
            "url": "https://shruthim0.github.io/repository2/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Class Notes and Resources",
            "content": "Weeks: 08/22-08/29 . AP Chemistry Learned: stoichiometry unit, had a practice frq | Things to get done memorize Polyatomic Ions | memorize Solubility Rules | take notes on stoichiometry methods | . | . | AP Calculus BC Learned: Review of Limits (limits to infinity, absolute value limits, squeeze theorem, essential trig limits), started Derivative Unit (limit definition,…) | Things to get done Finish Unit 1 Closure | Finish Friday HW | Study for Test 1 (09/1) | Finish (08/29) cw/hw | . | . | AP English Language Learned: how to write a precis, different rhetorical strategies, 2 different thesis formats, proper introduction paragraph format. | Things to get done Study rhetorical strategies to prepare for on-demand (08/31) | proof-read notesbook for check (08/31) | . | . | AP Computer Science Principles Things to get done post issue with Week 2 assignment links | . | . | Orchestra Things to get done practice for auditions (09/05) | maybe practice scaled | . | . | .",
            "url": "https://shruthim0.github.io/repository2/school/2022/08/28/schoolnotes.html",
            "relUrl": "/school/2022/08/28/schoolnotes.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/shruthim/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/shruthim/.local/share/jupyter/kernels/bash javascript /home/shruthim/.local/share/jupyter/kernels/javascript python3 /home/shruthim/.local/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/shruthim/.local/share/jupyter/kernels/python3 .",
            "url": "https://shruthim0.github.io/repository2/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Quiz",
            "content": "First, answering the provided questions: . def question_and_answer(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken print(&quot;Answer: &quot; + msg) # prints the user&#39;s input/answer question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Question: Name the Python output command mentioned in this lesson? Answer: print() Question: If you see many lines of code in order, what would College Board call it? Answer: a sequence of code Question: Describe a keyword used in Python to define a function? Answer: def . import getpass, sys def question_with_response(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken return msg # returns as string value questions = 3 # total number of questions correct = 0 # number that is initially correct (before any questions are answered) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: # establishing if/else statement; if user&#39;s input is &quot;import&quot; print(rsp + &quot; is correct!&quot;) # then it is correct correct += 1 # one point is added to number correct score else: print(rsp + &quot; is incorrect!&quot;) # if user&#39;s input is not &quot;import,&quot; than user is incorrect rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) # print&#39;s user&#39;s score . Hello, shruthim running /usr/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! shruthim you scored 3/3 . Creating my own quiz (based on CollegeBoard&#39;s vocabulary): . print (&quot;Hello World&quot;) # image 1 . msg = input(&quot;Enter a greeting: &quot;) #image 2 print(msg) . import getpass, sys def question_with_response(prompt): # defines question_and_answer print(&quot;Question: &quot; + prompt) # asks the question msg = input() # the user&#39;s input/answer is taken return msg # returns as string value questions = 5 # total number of questions correct = 0 # number that is initially correct (before any questions are answered) print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions!&quot;) question_and_answer(&quot;Are you ready to take this fun test on Python syntax?&quot;) rsp = question_with_response (&quot;In image 1, Hello, World is what kind of text?&quot;) if rsp == &quot;static&quot; or rsp == &quot;output&quot;: # establishing if/else statement; if user&#39;s input is &quot;static&quot; or &quot;output&quot; print(rsp + &quot; is correct!&quot;) # then it is correct correct += 1 # one point is added to number correct score else: print(rsp + &quot; is incorrect :(&quot;) # if user&#39;s input is not &quot;import,&quot; than user is incorrect rsp = question_with_response(&quot;In image 1, what is the output?&quot;) if rsp == &quot;Hello World&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;In image 2, because the inputs and outputs can ______, the code is _______ &quot;) if rsp == &quot;change and dynamic&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;The variable, msg, is then used as a _______ to the print command&quot;) if rsp == &quot;parameter&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) rsp = question_with_response(&quot;What is it grouping a sequence of commands, often used repeatedly, called?&quot;) if rsp == &quot;procedural abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect :(&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;!!&quot;) # print&#39;s user&#39;s score . Hello, shruthim running /usr/bin/python3 You will be asked 5 questions! Question: Are you ready to take this fun test on Python syntax? Answer: yes Question: In image 1, Hello, World is what kind of text? static is correct! Question: In image 1, what is the output? Hello World is correct! Question: In image 2, because the inputs and outputs can ______, the code is _______ change and dynamic is correct! Question: The variable, msg, is then used as a _______ to the print command parameter is correct! Question: What is it grouping a sequence of commands, often used repeatedly, called? procedural abstraction is correct! shruthim you scored 5/5!! .",
            "url": "https://shruthim0.github.io/repository2/2022/08/24/pythonquiz.html",
            "relUrl": "/2022/08/24/pythonquiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "First Markdown Post !",
            "content": "First Level of Heading . Second Level of Heading !! . Third Level of Heading . and even more . and more . . Basic Stuff . italics | bold text | code font!! | create links | strikethrough text | make bulleted lists: item 1 | item 1a | item 1b | . | . Goals . I hope to improve my programming and problem solving skills :) .",
            "url": "https://shruthim0.github.io/repository2/markdown/2022/08/21/firstmarkdownpost.html",
            "relUrl": "/markdown/2022/08/21/firstmarkdownpost.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Jupyter Notebook- "Hello" with Python",
            "content": "print (&quot;Hello! ....&quot;) . Hello! .... .",
            "url": "https://shruthim0.github.io/repository2/2022/08/21/firstjupyternotebook.html",
            "relUrl": "/2022/08/21/firstjupyternotebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shruthim0.github.io/repository2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi! My name is Shruthi and I’m a junior at DNHS! .",
          "url": "https://shruthim0.github.io/repository2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "Week 0 . Downloading and Setting up Tools | PowerShell cd = change directory | cd ~ = change directory to home | ls = list files | code . = opens up VSCode | . | Markdown #,##,##-size of font | italics | bold | strikethrough | . | . Week 1 . Python print (“text”) = will print what is in the quotes | def = used to define a function | import = imports a function | . | Markdown embed an image: use site.baseur | . | . Week 2 . | | | .",
          "url": "https://shruthim0.github.io/repository2/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shruthim0.github.io/repository2/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}